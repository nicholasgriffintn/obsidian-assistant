"use strict";var ro=Object.defineProperty;var so=(t,e,n)=>e in t?ro(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n;var $e=(t,e,n)=>(so(t,typeof e!="symbol"?e+"":e,n),n);const M=require("obsidian");var Us="vercel.ai.error",ao=Symbol.for(Us),Vs,io=class Bs extends Error{constructor({name:e,message:n,cause:r}){super(n),this[Vs]=!0,this.name=e,this.cause=r}static isInstance(e){return Bs.hasMarker(e,Us)}static hasMarker(e,n){const r=Symbol.for(n);return e!=null&&typeof e=="object"&&r in e&&typeof e[r]=="boolean"&&e[r]===!0}};Vs=ao;var O=io,zs="AI_APICallError",qs=`vercel.ai.error.${zs}`,oo=Symbol.for(qs),Gs,Se=class extends O{constructor({message:t,url:e,requestBodyValues:n,statusCode:r,responseHeaders:s,responseBody:a,cause:i,isRetryable:o=r!=null&&(r===408||r===409||r===429||r>=500),data:l}){super({name:zs,message:t,cause:i}),this[Gs]=!0,this.url=e,this.requestBodyValues=n,this.statusCode=r,this.responseHeaders=s,this.responseBody=a,this.isRetryable=o,this.data=l}static isInstance(t){return O.hasMarker(t,qs)}};Gs=oo;var Js="AI_EmptyResponseBodyError",Hs=`vercel.ai.error.${Js}`,lo=Symbol.for(Hs),Ws,co=class extends O{constructor({message:t="Empty response body"}={}){super({name:Js,message:t}),this[Ws]=!0}static isInstance(t){return O.hasMarker(t,Hs)}};Ws=lo;function fn(t){return t==null?"unknown error":typeof t=="string"?t:t instanceof Error?t.message:JSON.stringify(t)}var Ys="AI_InvalidArgumentError",Ks=`vercel.ai.error.${Ys}`,uo=Symbol.for(Ks),Xs,po=class extends O{constructor({message:e,cause:n,argument:r}){super({name:Ys,message:e,cause:n}),this[Xs]=!0,this.argument=r}static isInstance(e){return O.hasMarker(e,Ks)}};Xs=uo;var Qs="AI_InvalidPromptError",ea=`vercel.ai.error.${Qs}`,fo=Symbol.for(ea),ta,He=class extends O{constructor({prompt:t,message:e,cause:n}){super({name:Qs,message:`Invalid prompt: ${e}`,cause:n}),this[ta]=!0,this.prompt=t}static isInstance(t){return O.hasMarker(t,ea)}};ta=fo;var na="AI_InvalidResponseDataError",ra=`vercel.ai.error.${na}`,ho=Symbol.for(ra),sa,Wn=class extends O{constructor({data:t,message:e=`Invalid response data: ${JSON.stringify(t)}.`}){super({name:na,message:e}),this[sa]=!0,this.data=t}static isInstance(t){return O.hasMarker(t,ra)}};sa=ho;var aa="AI_JSONParseError",ia=`vercel.ai.error.${aa}`,mo=Symbol.for(ia),oa,kn=class extends O{constructor({text:t,cause:e}){super({name:aa,message:`JSON parsing failed: Text: ${t}.
Error message: ${fn(e)}`,cause:e}),this[oa]=!0,this.text=t}static isInstance(t){return O.hasMarker(t,ia)}};oa=mo;var la="AI_LoadAPIKeyError",ca=`vercel.ai.error.${la}`,go=Symbol.for(ca),ua,_n=class extends O{constructor({message:t}){super({name:la,message:t}),this[ua]=!0}static isInstance(t){return O.hasMarker(t,ca)}};ua=go;var da="AI_TooManyEmbeddingValuesForCallError",pa=`vercel.ai.error.${da}`,yo=Symbol.for(pa),fa,vo=class extends O{constructor(t){super({name:da,message:`Too many values for a single embedding call. The ${t.provider} model "${t.modelId}" can only embed up to ${t.maxEmbeddingsPerCall} values per call, but ${t.values.length} values were provided.`}),this[fa]=!0,this.provider=t.provider,this.modelId=t.modelId,this.maxEmbeddingsPerCall=t.maxEmbeddingsPerCall,this.values=t.values}static isInstance(t){return O.hasMarker(t,pa)}};fa=yo;var ha="AI_TypeValidationError",ma=`vercel.ai.error.${ha}`,_o=Symbol.for(ma),ga,bo=class ir extends O{constructor({value:e,cause:n}){super({name:ha,message:`Type validation failed: Value: ${JSON.stringify(e)}.
Error message: ${fn(n)}`,cause:n}),this[ga]=!0,this.value=e}static isInstance(e){return O.hasMarker(e,ma)}static wrap({value:e,cause:n}){return ir.isInstance(n)&&n.value===e?n:new ir({value:e,cause:n})}};ga=_o;var Tn=bo,ya="AI_UnsupportedFunctionalityError",va=`vercel.ai.error.${ya}`,wo=Symbol.for(va),_a,Re=class extends O{constructor({functionality:t,message:e=`'${t}' functionality not supported.`}){super({name:ya,message:e}),this[_a]=!0,this.functionality=t}static isInstance(t){return O.hasMarker(t,va)}};_a=wo;let So=(t,e=21)=>(n=e)=>{let r="",s=n|0;for(;s--;)r+=t[Math.random()*t.length|0];return r};function xo(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var wt={exports:{}};const ko=typeof Buffer<"u",ns=/"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/,rs=/"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;function ba(t,e,n){n==null&&e!==null&&typeof e=="object"&&(n=e,e=void 0),ko&&Buffer.isBuffer(t)&&(t=t.toString()),t&&t.charCodeAt(0)===65279&&(t=t.slice(1));const r=JSON.parse(t,e);if(r===null||typeof r!="object")return r;const s=n&&n.protoAction||"error",a=n&&n.constructorAction||"error";if(s==="ignore"&&a==="ignore")return r;if(s!=="ignore"&&a!=="ignore"){if(ns.test(t)===!1&&rs.test(t)===!1)return r}else if(s!=="ignore"&&a==="ignore"){if(ns.test(t)===!1)return r}else if(rs.test(t)===!1)return r;return wa(r,{protoAction:s,constructorAction:a,safe:n&&n.safe})}function wa(t,{protoAction:e="error",constructorAction:n="error",safe:r}={}){let s=[t];for(;s.length;){const a=s;s=[];for(const i of a){if(e!=="ignore"&&Object.prototype.hasOwnProperty.call(i,"__proto__")){if(r===!0)return null;if(e==="error")throw new SyntaxError("Object contains forbidden prototype property");delete i.__proto__}if(n!=="ignore"&&Object.prototype.hasOwnProperty.call(i,"constructor")&&Object.prototype.hasOwnProperty.call(i.constructor,"prototype")){if(r===!0)return null;if(n==="error")throw new SyntaxError("Object contains forbidden prototype property");delete i.constructor}for(const o in i){const l=i[o];l&&typeof l=="object"&&s.push(l)}}}return t}function xr(t,e,n){const r=Error.stackTraceLimit;Error.stackTraceLimit=0;try{return ba(t,e,n)}finally{Error.stackTraceLimit=r}}function To(t,e){const n=Error.stackTraceLimit;Error.stackTraceLimit=0;try{return ba(t,e,{safe:!0})}catch{return null}finally{Error.stackTraceLimit=n}}wt.exports=xr;wt.exports.default=xr;wt.exports.parse=xr;wt.exports.safeParse=To;wt.exports.scan=wa;var Eo=wt.exports;const kr=xo(Eo);var Co=Object.defineProperty,Io=(t,e,n)=>e in t?Co(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,bn=(t,e,n)=>Io(t,typeof e!="symbol"?e+"":e,n);class ss extends Error{constructor(e,n){super(e),bn(this,"type"),bn(this,"field"),bn(this,"value"),bn(this,"line"),this.name="ParseError",this.type=n.type,this.field=n.field,this.value=n.value,this.line=n.line}}function Yn(t){}function Ao(t){const{onEvent:e=Yn,onError:n=Yn,onRetry:r=Yn,onComment:s}=t;let a="",i=!0,o,l="",c="";function u(_){const S=i?_.replace(/^\xEF\xBB\xBF/,""):_,[E,$]=No(`${a}${S}`);for(const L of E)d(L);a=$,i=!1}function d(_){if(_===""){h();return}if(_.startsWith(":")){s&&s(_.slice(_.startsWith(": ")?2:1));return}const S=_.indexOf(":");if(S!==-1){const E=_.slice(0,S),$=_[S+1]===" "?2:1,L=_.slice(S+$);p(E,L,_);return}p(_,"",_)}function p(_,S,E){switch(_){case"event":c=S;break;case"data":l=`${l}${S}
`;break;case"id":o=S.includes("\0")?void 0:S;break;case"retry":/^\d+$/.test(S)?r(parseInt(S,10)):n(new ss(`Invalid \`retry\` value: "${S}"`,{type:"invalid-retry",value:S,line:E}));break;default:n(new ss(`Unknown field "${_.length>20?`${_.slice(0,20)}â€¦`:_}"`,{type:"unknown-field",field:_,value:S,line:E}));break}}function h(){l.length>0&&e({id:o,event:c||void 0,data:l.endsWith(`
`)?l.slice(0,-1):l}),o=void 0,l="",c=""}function g(_={}){a&&_.consume&&d(a),o=void 0,l="",c="",a=""}return{feed:u,reset:g}}function No(t){const e=[];let n="";const r=t.length;for(let s=0;s<r;s++){const a=t[s];a==="\r"&&t[s+1]===`
`?(e.push(n),n="",s++):a==="\r"||a===`
`?(e.push(n),n=""):n+=a}return[e,n]}class Ro extends TransformStream{constructor({onError:e,onRetry:n,onComment:r}={}){let s;super({start(a){s=Ao({onEvent:i=>{a.enqueue(i)},onError(i){e==="terminate"?a.error(i):typeof e=="function"&&e(i)},onRetry:n,onComment:r})},transform(a){s.feed(a)}})}}function Rt(...t){return t.reduce((e,n)=>({...e,...n??{}}),{})}function Mo(t){return new ReadableStream({async pull(e){try{const{value:n,done:r}=await t.next();r?e.close():e.enqueue(n)}catch(n){e.error(n)}},cancel(){}})}function zn(t){const e={};return t.headers.forEach((n,r)=>{e[r]=n}),e}var hn=({prefix:t,size:e=16,alphabet:n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",separator:r="-"}={})=>{const s=So(n,e);if(t==null)return s;if(n.includes(r))throw new po({argument:"separator",message:`The separator "${r}" must not be part of the alphabet "${n}".`});return a=>`${t}${r}${s(a)}`},Kn=hn();function Oo(t){return t==null?"unknown error":typeof t=="string"?t:t instanceof Error?t.message:JSON.stringify(t)}function Sn(t){return t instanceof Error&&(t.name==="AbortError"||t.name==="TimeoutError")}function Po({apiKey:t,environmentVariableName:e,apiKeyParameterName:n="apiKey",description:r}){if(typeof t=="string")return t;if(t!=null)throw new _n({message:`${r} API key must be a string.`});if(typeof process>"u")throw new _n({message:`${r} API key is missing. Pass it using the '${n}' parameter. Environment variables is not supported in this environment.`});if(t=process.env[e],t==null)throw new _n({message:`${r} API key is missing. Pass it using the '${n}' parameter or the ${e} environment variable.`});if(typeof t!="string")throw new _n({message:`${r} API key must be a string. The value of the ${e} environment variable is not a string.`});return t}var En=Symbol.for("vercel.ai.validator");function jo(t){return{[En]:!0,validate:t}}function $o(t){return typeof t=="object"&&t!==null&&En in t&&t[En]===!0&&"validate"in t}function Do(t){return $o(t)?t:Lo(t)}function Lo(t){return jo(e=>{const n=t.safeParse(e);return n.success?{success:!0,value:n.data}:{success:!1,error:n.error}})}function Zo({value:t,schema:e}){const n=mn({value:t,schema:e});if(!n.success)throw Tn.wrap({value:t,cause:n.error});return n.value}function mn({value:t,schema:e}){const n=Do(e);try{if(n.validate==null)return{success:!0,value:t};const r=n.validate(t);return r.success?r:{success:!1,error:Tn.wrap({value:t,cause:r.error})}}catch(r){return{success:!1,error:Tn.wrap({value:t,cause:r})}}}function Fo({text:t,schema:e}){try{const n=kr.parse(t);return e==null?n:Zo({value:n,schema:e})}catch(n){throw kn.isInstance(n)||Tn.isInstance(n)?n:new kn({text:t,cause:n})}}function gt({text:t,schema:e}){try{const n=kr.parse(t);return e==null?{success:!0,value:n}:mn({value:n,schema:e})}catch(n){return{success:!1,error:kn.isInstance(n)?n:new kn({text:t,cause:n})}}}function as(t){try{return kr.parse(t),!0}catch{return!1}}function Uo(t){return Object.fromEntries(Object.entries(t).filter(([e,n])=>n!=null))}var Vo=()=>globalThis.fetch,Mt=async({url:t,headers:e,body:n,failedResponseHandler:r,successfulResponseHandler:s,abortSignal:a,fetch:i})=>Bo({url:t,headers:{"Content-Type":"application/json",...e},body:{content:JSON.stringify(n),values:n},failedResponseHandler:r,successfulResponseHandler:s,abortSignal:a,fetch:i}),Bo=async({url:t,headers:e={},body:n,successfulResponseHandler:r,failedResponseHandler:s,abortSignal:a,fetch:i=Vo()})=>{try{const o=await i(t,{method:"POST",headers:Uo(e),body:n.content,signal:a}),l=zn(o);if(!o.ok){let c;try{c=await s({response:o,url:t,requestBodyValues:n.values})}catch(u){throw Sn(u)||Se.isInstance(u)?u:new Se({message:"Failed to process error response",cause:u,statusCode:o.status,url:t,responseHeaders:l,requestBodyValues:n.values})}throw c.value}try{return await r({response:o,url:t,requestBodyValues:n.values})}catch(c){throw c instanceof Error&&(Sn(c)||Se.isInstance(c))?c:new Se({message:"Failed to process successful response",cause:c,statusCode:o.status,url:t,responseHeaders:l,requestBodyValues:n.values})}}catch(o){if(Sn(o))throw o;if(o instanceof TypeError&&o.message==="fetch failed"){const l=o.cause;if(l!=null)throw new Se({message:`Cannot connect to API: ${l.message}`,cause:l,url:t,requestBodyValues:n.values,isRetryable:!0})}throw o}},Tr=({errorSchema:t,errorToMessage:e,isRetryable:n})=>async({response:r,url:s,requestBodyValues:a})=>{const i=await r.text(),o=zn(r);if(i.trim()==="")return{responseHeaders:o,value:new Se({message:r.statusText,url:s,requestBodyValues:a,statusCode:r.status,responseHeaders:o,responseBody:i,isRetryable:n==null?void 0:n(r)})};try{const l=Fo({text:i,schema:t});return{responseHeaders:o,value:new Se({message:e(l),url:s,requestBodyValues:a,statusCode:r.status,responseHeaders:o,responseBody:i,data:l,isRetryable:n==null?void 0:n(r,l)})}}catch{return{responseHeaders:o,value:new Se({message:r.statusText,url:s,requestBodyValues:a,statusCode:r.status,responseHeaders:o,responseBody:i,isRetryable:n==null?void 0:n(r)})}}},Sa=t=>async({response:e})=>{const n=zn(e);if(e.body==null)throw new co({});return{responseHeaders:n,value:e.body.pipeThrough(new TextDecoderStream).pipeThrough(new Ro).pipeThrough(new TransformStream({transform({data:r},s){r!=="[DONE]"&&s.enqueue(gt({text:r,schema:t}))}}))}},Er=t=>async({response:e,url:n,requestBodyValues:r})=>{const s=await e.text(),a=gt({text:s,schema:t}),i=zn(e);if(!a.success)throw new Se({message:"Invalid JSON response",cause:a.error,statusCode:e.status,responseHeaders:i,responseBody:s,url:n,requestBodyValues:r});return{responseHeaders:i,value:a.value}},{btoa:zo,atob:qo}=globalThis;function Go(t){const e=t.replace(/-/g,"+").replace(/_/g,"/"),n=qo(e);return Uint8Array.from(n,r=>r.codePointAt(0))}function or(t){let e="";for(let n=0;n<t.length;n++)e+=String.fromCodePoint(t[n]);return zo(e)}function Jo(t){return t==null?void 0:t.replace(/\/$/,"")}const Ho=Symbol("Let zodToJsonSchema decide on which parser to use"),is={name:void 0,$refStrategy:"root",basePath:["#"],effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,definitions:{},errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Wo=t=>typeof t=="string"?{...is,name:t}:{...is,...t},Yo=t=>{const e=Wo(t),n=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:n,propertyPath:void 0,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[s._def,{def:s._def,path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function xa(t,e,n,r){r!=null&&r.errorMessages&&n&&(t.errorMessage={...t.errorMessage,[e]:n})}function B(t,e,n,r,s){t[e]=n,xa(t,e,r,s)}var Z;(function(t){t.assertEqual=s=>s;function e(s){}t.assertIs=e;function n(s){throw new Error}t.assertNever=n,t.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},t.getValidEnumValues=s=>{const a=t.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return t.objectValues(i)},t.objectValues=s=>t.objectKeys(s).map(function(a){return s[a]}),t.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},t.find=(s,a)=>{for(const i of s)if(a(i))return i},t.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}t.joinValues=r,t.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(Z||(Z={}));var lr;(function(t){t.mergeShapes=(e,n)=>({...e,...n})})(lr||(lr={}));const w=Z.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ne=t=>{switch(typeof t){case"undefined":return w.undefined;case"string":return w.string;case"number":return isNaN(t)?w.nan:w.number;case"boolean":return w.boolean;case"function":return w.function;case"bigint":return w.bigint;case"symbol":return w.symbol;case"object":return Array.isArray(t)?w.array:t===null?w.null:t.then&&typeof t.then=="function"&&t.catch&&typeof t.catch=="function"?w.promise:typeof Map<"u"&&t instanceof Map?w.map:typeof Set<"u"&&t instanceof Set?w.set:typeof Date<"u"&&t instanceof Date?w.date:w.object;default:return w.unknown}},y=Z.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),Ko=t=>JSON.stringify(t,null,2).replace(/"([^"]+)":/g,"$1:");class de extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const n=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,n):this.__proto__=n,this.name="ZodError",this.issues=e}format(e){const n=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(n(i));else{let o=r,l=0;for(;l<i.path.length;){const c=i.path[l];l===i.path.length-1?(o[c]=o[c]||{_errors:[]},o[c]._errors.push(n(i))):o[c]=o[c]||{_errors:[]},o=o[c],l++}}};return s(this),r}static assert(e){if(!(e instanceof de))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,Z.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=n=>n.message){const n={},r=[];for(const s of this.issues)s.path.length>0?(n[s.path[0]]=n[s.path[0]]||[],n[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:n}}get formErrors(){return this.flatten()}}de.create=t=>new de(t);const yt=(t,e)=>{let n;switch(t.code){case y.invalid_type:t.received===w.undefined?n="Required":n=`Expected ${t.expected}, received ${t.received}`;break;case y.invalid_literal:n=`Invalid literal value, expected ${JSON.stringify(t.expected,Z.jsonStringifyReplacer)}`;break;case y.unrecognized_keys:n=`Unrecognized key(s) in object: ${Z.joinValues(t.keys,", ")}`;break;case y.invalid_union:n="Invalid input";break;case y.invalid_union_discriminator:n=`Invalid discriminator value. Expected ${Z.joinValues(t.options)}`;break;case y.invalid_enum_value:n=`Invalid enum value. Expected ${Z.joinValues(t.options)}, received '${t.received}'`;break;case y.invalid_arguments:n="Invalid function arguments";break;case y.invalid_return_type:n="Invalid function return type";break;case y.invalid_date:n="Invalid date";break;case y.invalid_string:typeof t.validation=="object"?"includes"in t.validation?(n=`Invalid input: must include "${t.validation.includes}"`,typeof t.validation.position=="number"&&(n=`${n} at one or more positions greater than or equal to ${t.validation.position}`)):"startsWith"in t.validation?n=`Invalid input: must start with "${t.validation.startsWith}"`:"endsWith"in t.validation?n=`Invalid input: must end with "${t.validation.endsWith}"`:Z.assertNever(t.validation):t.validation!=="regex"?n=`Invalid ${t.validation}`:n="Invalid";break;case y.too_small:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at least":"more than"} ${t.minimum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at least":"over"} ${t.minimum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${t.minimum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(t.minimum))}`:n="Invalid input";break;case y.too_big:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at most":"less than"} ${t.maximum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at most":"under"} ${t.maximum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="bigint"?n=`BigInt must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly":t.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(t.maximum))}`:n="Invalid input";break;case y.custom:n="Invalid input";break;case y.invalid_intersection_types:n="Intersection results could not be merged";break;case y.not_multiple_of:n=`Number must be a multiple of ${t.multipleOf}`;break;case y.not_finite:n="Number must be finite";break;default:n=e.defaultError,Z.assertNever(t)}return{message:n}};let ka=yt;function Xo(t){ka=t}function Cn(){return ka}const In=t=>{const{data:e,path:n,errorMaps:r,issueData:s}=t,a=[...n,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const l=r.filter(c=>!!c).slice().reverse();for(const c of l)o=c(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}},Qo=[];function b(t,e){const n=Cn(),r=In({issueData:e,data:t.data,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,n,n===yt?void 0:yt].filter(s=>!!s)});t.common.issues.push(r)}class ie{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,n){const r=[];for(const s of n){if(s.status==="aborted")return C;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,n){const r=[];for(const s of n){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return ie.mergeObjectSync(e,r)}static mergeObjectSync(e,n){const r={};for(const s of n){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return C;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const C=Object.freeze({status:"aborted"}),ut=t=>({status:"dirty",value:t}),le=t=>({status:"valid",value:t}),cr=t=>t.status==="aborted",ur=t=>t.status==="dirty",Ke=t=>t.status==="valid",Ot=t=>typeof Promise<"u"&&t instanceof Promise;function An(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)}function Ta(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n}var k;(function(t){t.errToObj=e=>typeof e=="string"?{message:e}:e||{},t.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(k||(k={}));var Ct,It;class Te{constructor(e,n,r,s){this._cachedPath=[],this.parent=e,this.data=n,this._path=r,this._key=s}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const os=(t,e)=>{if(Ke(e))return{success:!0,data:e.value};if(!t.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const n=new de(t.common.issues);return this._error=n,this._error}}};function P(t){if(!t)return{};const{errorMap:e,invalid_type_error:n,required_error:r,description:s}=t;if(e&&(n||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{var l,c;const{message:u}=t;return i.code==="invalid_enum_value"?{message:u??o.defaultError}:typeof o.data>"u"?{message:(l=u??r)!==null&&l!==void 0?l:o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:(c=u??n)!==null&&c!==void 0?c:o.defaultError}},description:s}}class j{get description(){return this._def.description}_getType(e){return Ne(e.data)}_getOrReturnCtx(e,n){return n||{common:e.parent.common,data:e.data,parsedType:Ne(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new ie,ctx:{common:e.parent.common,data:e.data,parsedType:Ne(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const n=this._parse(e);if(Ot(n))throw new Error("Synchronous parse encountered promise.");return n}_parseAsync(e){const n=this._parse(e);return Promise.resolve(n)}parse(e,n){const r=this.safeParse(e,n);if(r.success)return r.data;throw r.error}safeParse(e,n){var r;const s={common:{issues:[],async:(r=n==null?void 0:n.async)!==null&&r!==void 0?r:!1,contextualErrorMap:n==null?void 0:n.errorMap},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ne(e)},a=this._parseSync({data:e,path:s.path,parent:s});return os(s,a)}"~validate"(e){var n,r;const s={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ne(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:s});return Ke(a)?{value:a.value}:{issues:s.common.issues}}catch(a){!((r=(n=a==null?void 0:a.message)===null||n===void 0?void 0:n.toLowerCase())===null||r===void 0)&&r.includes("encountered")&&(this["~standard"].async=!0),s.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:s}).then(a=>Ke(a)?{value:a.value}:{issues:s.common.issues})}async parseAsync(e,n){const r=await this.safeParseAsync(e,n);if(r.success)return r.data;throw r.error}async safeParseAsync(e,n){const r={common:{issues:[],contextualErrorMap:n==null?void 0:n.errorMap,async:!0},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ne(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(Ot(s)?s:Promise.resolve(s));return os(r,a)}refine(e,n){const r=s=>typeof n=="string"||typeof n>"u"?{message:n}:typeof n=="function"?n(s):n;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:y.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(l=>l?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,n){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof n=="function"?n(r,s):n),!1))}_refinement(e){return new _e({schema:this,typeName:v.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:n=>this["~validate"](n)}}optional(){return ve.create(this,this._def)}nullable(){return Ue.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return ye.create(this)}promise(){return _t.create(this,this._def)}or(e){return Dt.create([this,e],this._def)}and(e){return Lt.create(this,e,this._def)}transform(e){return new _e({...P(this._def),schema:this,typeName:v.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const n=typeof e=="function"?e:()=>e;return new Bt({...P(this._def),innerType:this,defaultValue:n,typeName:v.ZodDefault})}brand(){return new Cr({typeName:v.ZodBranded,type:this,...P(this._def)})}catch(e){const n=typeof e=="function"?e:()=>e;return new zt({...P(this._def),innerType:this,catchValue:n,typeName:v.ZodCatch})}describe(e){const n=this.constructor;return new n({...this._def,description:e})}pipe(e){return gn.create(this,e)}readonly(){return qt.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const el=/^c[^\s-]{8,}$/i,tl=/^[0-9a-z]+$/,nl=/^[0-9A-HJKMNP-TV-Z]{26}$/i,rl=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,sl=/^[a-z0-9_-]{21}$/i,al=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,il=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,ol=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,ll="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Xn;const cl=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,ul=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,dl=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,pl=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,fl=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,hl=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,Ea="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",ml=new RegExp(`^${Ea}$`);function Ca(t){let e="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return t.precision?e=`${e}\\.\\d{${t.precision}}`:t.precision==null&&(e=`${e}(\\.\\d+)?`),e}function gl(t){return new RegExp(`^${Ca(t)}$`)}function Ia(t){let e=`${Ea}T${Ca(t)}`;const n=[];return n.push(t.local?"Z?":"Z"),t.offset&&n.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${n.join("|")})`,new RegExp(`^${e}$`)}function yl(t,e){return!!((e==="v4"||!e)&&cl.test(t)||(e==="v6"||!e)&&dl.test(t))}function vl(t,e){if(!al.test(t))return!1;try{const[n]=t.split("."),r=n.replace(/-/g,"+").replace(/_/g,"/").padEnd(n.length+(4-n.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||!s.typ||!s.alg||e&&s.alg!==e)}catch{return!1}}function _l(t,e){return!!((e==="v4"||!e)&&ul.test(t)||(e==="v6"||!e)&&pl.test(t))}class ge extends j{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==w.string){const a=this._getOrReturnCtx(e);return b(a,{code:y.invalid_type,expected:w.string,received:a.parsedType}),C}const r=new ie;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),b(s,{code:y.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),b(s,{code:y.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?b(s,{code:y.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&b(s,{code:y.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")ol.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"email",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")Xn||(Xn=new RegExp(ll,"u")),Xn.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"emoji",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")rl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"uuid",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")sl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"nanoid",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")el.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"cuid",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")tl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"cuid2",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")nl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"ulid",code:y.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),b(s,{validation:"url",code:y.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"regex",code:y.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?Ia(a).test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?ml.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?gl(a).test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{code:y.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?il.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"duration",code:y.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?yl(e.data,a.version)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"ip",code:y.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?vl(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"jwt",code:y.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?_l(e.data,a.version)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"cidr",code:y.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?fl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"base64",code:y.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?hl.test(e.data)||(s=this._getOrReturnCtx(e,s),b(s,{validation:"base64url",code:y.invalid_string,message:a.message}),r.dirty()):Z.assertNever(a);return{status:r.value,value:e.data}}_regex(e,n,r){return this.refinement(s=>e.test(s),{validation:n,code:y.invalid_string,...k.errToObj(r)})}_addCheck(e){return new ge({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...k.errToObj(e)})}url(e){return this._addCheck({kind:"url",...k.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...k.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...k.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...k.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...k.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...k.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...k.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...k.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...k.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...k.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...k.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...k.errToObj(e)})}datetime(e){var n,r;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(n=e==null?void 0:e.offset)!==null&&n!==void 0?n:!1,local:(r=e==null?void 0:e.local)!==null&&r!==void 0?r:!1,...k.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...k.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...k.errToObj(e)})}regex(e,n){return this._addCheck({kind:"regex",regex:e,...k.errToObj(n)})}includes(e,n){return this._addCheck({kind:"includes",value:e,position:n==null?void 0:n.position,...k.errToObj(n==null?void 0:n.message)})}startsWith(e,n){return this._addCheck({kind:"startsWith",value:e,...k.errToObj(n)})}endsWith(e,n){return this._addCheck({kind:"endsWith",value:e,...k.errToObj(n)})}min(e,n){return this._addCheck({kind:"min",value:e,...k.errToObj(n)})}max(e,n){return this._addCheck({kind:"max",value:e,...k.errToObj(n)})}length(e,n){return this._addCheck({kind:"length",value:e,...k.errToObj(n)})}nonempty(e){return this.min(1,k.errToObj(e))}trim(){return new ge({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new ge({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new ge({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxLength(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}}ge.create=t=>{var e;return new ge({checks:[],typeName:v.ZodString,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...P(t)})};function bl(t,e){const n=(t.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=n>r?n:r,a=parseInt(t.toFixed(s).replace(".","")),i=parseInt(e.toFixed(s).replace(".",""));return a%i/Math.pow(10,s)}class Le extends j{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==w.number){const a=this._getOrReturnCtx(e);return b(a,{code:y.invalid_type,expected:w.number,received:a.parsedType}),C}let r;const s=new ie;for(const a of this._def.checks)a.kind==="int"?Z.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),b(r,{code:y.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?bl(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),b(r,{code:y.not_finite,message:a.message}),s.dirty()):Z.assertNever(a);return{status:s.value,value:e.data}}gte(e,n){return this.setLimit("min",e,!0,k.toString(n))}gt(e,n){return this.setLimit("min",e,!1,k.toString(n))}lte(e,n){return this.setLimit("max",e,!0,k.toString(n))}lt(e,n){return this.setLimit("max",e,!1,k.toString(n))}setLimit(e,n,r,s){return new Le({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:r,message:k.toString(s)}]})}_addCheck(e){return new Le({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:k.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:k.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:k.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:k.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:k.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:k.toString(n)})}finite(e){return this._addCheck({kind:"finite",message:k.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:k.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:k.toString(e)})}get minValue(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&Z.isInteger(e.value))}get isFinite(){let e=null,n=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(n===null||r.value>n)&&(n=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(n)&&Number.isFinite(e)}}Le.create=t=>new Le({checks:[],typeName:v.ZodNumber,coerce:(t==null?void 0:t.coerce)||!1,...P(t)});class Ze extends j{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==w.bigint)return this._getInvalidInput(e);let r;const s=new ie;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),b(r,{code:y.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):Z.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const n=this._getOrReturnCtx(e);return b(n,{code:y.invalid_type,expected:w.bigint,received:n.parsedType}),C}gte(e,n){return this.setLimit("min",e,!0,k.toString(n))}gt(e,n){return this.setLimit("min",e,!1,k.toString(n))}lte(e,n){return this.setLimit("max",e,!0,k.toString(n))}lt(e,n){return this.setLimit("max",e,!1,k.toString(n))}setLimit(e,n,r,s){return new Ze({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:r,message:k.toString(s)}]})}_addCheck(e){return new Ze({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:k.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:k.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:k.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:k.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:k.toString(n)})}get minValue(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}}Ze.create=t=>{var e;return new Ze({checks:[],typeName:v.ZodBigInt,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...P(t)})};class Pt extends j{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==w.boolean){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.boolean,received:r.parsedType}),C}return le(e.data)}}Pt.create=t=>new Pt({typeName:v.ZodBoolean,coerce:(t==null?void 0:t.coerce)||!1,...P(t)});class Xe extends j{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==w.date){const a=this._getOrReturnCtx(e);return b(a,{code:y.invalid_type,expected:w.date,received:a.parsedType}),C}if(isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return b(a,{code:y.invalid_date}),C}const r=new ie;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),b(s,{code:y.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),b(s,{code:y.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):Z.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Xe({...this._def,checks:[...this._def.checks,e]})}min(e,n){return this._addCheck({kind:"min",value:e.getTime(),message:k.toString(n)})}max(e,n){return this._addCheck({kind:"max",value:e.getTime(),message:k.toString(n)})}get minDate(){let e=null;for(const n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e!=null?new Date(e):null}}Xe.create=t=>new Xe({checks:[],coerce:(t==null?void 0:t.coerce)||!1,typeName:v.ZodDate,...P(t)});class Nn extends j{_parse(e){if(this._getType(e)!==w.symbol){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.symbol,received:r.parsedType}),C}return le(e.data)}}Nn.create=t=>new Nn({typeName:v.ZodSymbol,...P(t)});class jt extends j{_parse(e){if(this._getType(e)!==w.undefined){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.undefined,received:r.parsedType}),C}return le(e.data)}}jt.create=t=>new jt({typeName:v.ZodUndefined,...P(t)});class $t extends j{_parse(e){if(this._getType(e)!==w.null){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.null,received:r.parsedType}),C}return le(e.data)}}$t.create=t=>new $t({typeName:v.ZodNull,...P(t)});class vt extends j{constructor(){super(...arguments),this._any=!0}_parse(e){return le(e.data)}}vt.create=t=>new vt({typeName:v.ZodAny,...P(t)});class Ye extends j{constructor(){super(...arguments),this._unknown=!0}_parse(e){return le(e.data)}}Ye.create=t=>new Ye({typeName:v.ZodUnknown,...P(t)});class Me extends j{_parse(e){const n=this._getOrReturnCtx(e);return b(n,{code:y.invalid_type,expected:w.never,received:n.parsedType}),C}}Me.create=t=>new Me({typeName:v.ZodNever,...P(t)});class Rn extends j{_parse(e){if(this._getType(e)!==w.undefined){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.void,received:r.parsedType}),C}return le(e.data)}}Rn.create=t=>new Rn({typeName:v.ZodVoid,...P(t)});class ye extends j{_parse(e){const{ctx:n,status:r}=this._processInputParams(e),s=this._def;if(n.parsedType!==w.array)return b(n,{code:y.invalid_type,expected:w.array,received:n.parsedType}),C;if(s.exactLength!==null){const i=n.data.length>s.exactLength.value,o=n.data.length<s.exactLength.value;(i||o)&&(b(n,{code:i?y.too_big:y.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&n.data.length<s.minLength.value&&(b(n,{code:y.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&n.data.length>s.maxLength.value&&(b(n,{code:y.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),n.common.async)return Promise.all([...n.data].map((i,o)=>s.type._parseAsync(new Te(n,i,n.path,o)))).then(i=>ie.mergeArray(r,i));const a=[...n.data].map((i,o)=>s.type._parseSync(new Te(n,i,n.path,o)));return ie.mergeArray(r,a)}get element(){return this._def.type}min(e,n){return new ye({...this._def,minLength:{value:e,message:k.toString(n)}})}max(e,n){return new ye({...this._def,maxLength:{value:e,message:k.toString(n)}})}length(e,n){return new ye({...this._def,exactLength:{value:e,message:k.toString(n)}})}nonempty(e){return this.min(1,e)}}ye.create=(t,e)=>new ye({type:t,minLength:null,maxLength:null,exactLength:null,typeName:v.ZodArray,...P(e)});function ot(t){if(t instanceof H){const e={};for(const n in t.shape){const r=t.shape[n];e[n]=ve.create(ot(r))}return new H({...t._def,shape:()=>e})}else return t instanceof ye?new ye({...t._def,type:ot(t.element)}):t instanceof ve?ve.create(ot(t.unwrap())):t instanceof Ue?Ue.create(ot(t.unwrap())):t instanceof Ee?Ee.create(t.items.map(e=>ot(e))):t}class H extends j{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),n=Z.objectKeys(e);return this._cached={shape:e,keys:n}}_parse(e){if(this._getType(e)!==w.object){const c=this._getOrReturnCtx(e);return b(c,{code:y.invalid_type,expected:w.object,received:c.parsedType}),C}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof Me&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||o.push(c);const l=[];for(const c of i){const u=a[c],d=s.data[c];l.push({key:{status:"valid",value:c},value:u._parse(new Te(s,d,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof Me){const c=this._def.unknownKeys;if(c==="passthrough")for(const u of o)l.push({key:{status:"valid",value:u},value:{status:"valid",value:s.data[u]}});else if(c==="strict")o.length>0&&(b(s,{code:y.unrecognized_keys,keys:o}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const u of o){const d=s.data[u];l.push({key:{status:"valid",value:u},value:c._parse(new Te(s,d,s.path,u)),alwaysSet:u in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const u of l){const d=await u.key,p=await u.value;c.push({key:d,value:p,alwaysSet:u.alwaysSet})}return c}).then(c=>ie.mergeObjectSync(r,c)):ie.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return k.errToObj,new H({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(n,r)=>{var s,a,i,o;const l=(i=(a=(s=this._def).errorMap)===null||a===void 0?void 0:a.call(s,n,r).message)!==null&&i!==void 0?i:r.defaultError;return n.code==="unrecognized_keys"?{message:(o=k.errToObj(e).message)!==null&&o!==void 0?o:l}:{message:l}}}:{}})}strip(){return new H({...this._def,unknownKeys:"strip"})}passthrough(){return new H({...this._def,unknownKeys:"passthrough"})}extend(e){return new H({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new H({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:v.ZodObject})}setKey(e,n){return this.augment({[e]:n})}catchall(e){return new H({...this._def,catchall:e})}pick(e){const n={};return Z.objectKeys(e).forEach(r=>{e[r]&&this.shape[r]&&(n[r]=this.shape[r])}),new H({...this._def,shape:()=>n})}omit(e){const n={};return Z.objectKeys(this.shape).forEach(r=>{e[r]||(n[r]=this.shape[r])}),new H({...this._def,shape:()=>n})}deepPartial(){return ot(this)}partial(e){const n={};return Z.objectKeys(this.shape).forEach(r=>{const s=this.shape[r];e&&!e[r]?n[r]=s:n[r]=s.optional()}),new H({...this._def,shape:()=>n})}required(e){const n={};return Z.objectKeys(this.shape).forEach(r=>{if(e&&!e[r])n[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof ve;)a=a._def.innerType;n[r]=a}}),new H({...this._def,shape:()=>n})}keyof(){return Aa(Z.objectKeys(this.shape))}}H.create=(t,e)=>new H({shape:()=>t,unknownKeys:"strip",catchall:Me.create(),typeName:v.ZodObject,...P(e)});H.strictCreate=(t,e)=>new H({shape:()=>t,unknownKeys:"strict",catchall:Me.create(),typeName:v.ZodObject,...P(e)});H.lazycreate=(t,e)=>new H({shape:t,unknownKeys:"strip",catchall:Me.create(),typeName:v.ZodObject,...P(e)});class Dt extends j{_parse(e){const{ctx:n}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return n.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new de(o.ctx.common.issues));return b(n,{code:y.invalid_union,unionErrors:i}),C}if(n.common.async)return Promise.all(r.map(async a=>{const i={...n,common:{...n.common,issues:[]},parent:null};return{result:await a._parseAsync({data:n.data,path:n.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const l of r){const c={...n,common:{...n.common,issues:[]},parent:null},u=l._parseSync({data:n.data,path:n.path,parent:c});if(u.status==="valid")return u;u.status==="dirty"&&!a&&(a={result:u,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return n.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(l=>new de(l));return b(n,{code:y.invalid_union,unionErrors:o}),C}}get options(){return this._def.options}}Dt.create=(t,e)=>new Dt({options:t,typeName:v.ZodUnion,...P(e)});const Ae=t=>t instanceof Ft?Ae(t.schema):t instanceof _e?Ae(t.innerType()):t instanceof Ut?[t.value]:t instanceof Fe?t.options:t instanceof Vt?Z.objectValues(t.enum):t instanceof Bt?Ae(t._def.innerType):t instanceof jt?[void 0]:t instanceof $t?[null]:t instanceof ve?[void 0,...Ae(t.unwrap())]:t instanceof Ue?[null,...Ae(t.unwrap())]:t instanceof Cr||t instanceof qt?Ae(t.unwrap()):t instanceof zt?Ae(t._def.innerType):[];class qn extends j{_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==w.object)return b(n,{code:y.invalid_type,expected:w.object,received:n.parsedType}),C;const r=this.discriminator,s=n.data[r],a=this.optionsMap.get(s);return a?n.common.async?a._parseAsync({data:n.data,path:n.path,parent:n}):a._parseSync({data:n.data,path:n.path,parent:n}):(b(n,{code:y.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),C)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,n,r){const s=new Map;for(const a of n){const i=Ae(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new qn({typeName:v.ZodDiscriminatedUnion,discriminator:e,options:n,optionsMap:s,...P(r)})}}function dr(t,e){const n=Ne(t),r=Ne(e);if(t===e)return{valid:!0,data:t};if(n===w.object&&r===w.object){const s=Z.objectKeys(e),a=Z.objectKeys(t).filter(o=>s.indexOf(o)!==-1),i={...t,...e};for(const o of a){const l=dr(t[o],e[o]);if(!l.valid)return{valid:!1};i[o]=l.data}return{valid:!0,data:i}}else if(n===w.array&&r===w.array){if(t.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<t.length;a++){const i=t[a],o=e[a],l=dr(i,o);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return n===w.date&&r===w.date&&+t==+e?{valid:!0,data:t}:{valid:!1}}class Lt extends j{_parse(e){const{status:n,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(cr(a)||cr(i))return C;const o=dr(a.value,i.value);return o.valid?((ur(a)||ur(i))&&n.dirty(),{status:n.value,value:o.data}):(b(r,{code:y.invalid_intersection_types}),C)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}Lt.create=(t,e,n)=>new Lt({left:t,right:e,typeName:v.ZodIntersection,...P(n)});class Ee extends j{_parse(e){const{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==w.array)return b(r,{code:y.invalid_type,expected:w.array,received:r.parsedType}),C;if(r.data.length<this._def.items.length)return b(r,{code:y.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),C;!this._def.rest&&r.data.length>this._def.items.length&&(b(r,{code:y.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),n.dirty());const a=[...r.data].map((i,o)=>{const l=this._def.items[o]||this._def.rest;return l?l._parse(new Te(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>ie.mergeArray(n,i)):ie.mergeArray(n,a)}get items(){return this._def.items}rest(e){return new Ee({...this._def,rest:e})}}Ee.create=(t,e)=>{if(!Array.isArray(t))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Ee({items:t,typeName:v.ZodTuple,rest:null,...P(e)})};class Zt extends j{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==w.object)return b(r,{code:y.invalid_type,expected:w.object,received:r.parsedType}),C;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new Te(r,o,r.path,o)),value:i._parse(new Te(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?ie.mergeObjectAsync(n,s):ie.mergeObjectSync(n,s)}get element(){return this._def.valueType}static create(e,n,r){return n instanceof j?new Zt({keyType:e,valueType:n,typeName:v.ZodRecord,...P(r)}):new Zt({keyType:ge.create(),valueType:e,typeName:v.ZodRecord,...P(n)})}}class Mn extends j{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==w.map)return b(r,{code:y.invalid_type,expected:w.map,received:r.parsedType}),C;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,l],c)=>({key:s._parse(new Te(r,o,r.path,[c,"key"])),value:a._parse(new Te(r,l,r.path,[c,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const l of i){const c=await l.key,u=await l.value;if(c.status==="aborted"||u.status==="aborted")return C;(c.status==="dirty"||u.status==="dirty")&&n.dirty(),o.set(c.value,u.value)}return{status:n.value,value:o}})}else{const o=new Map;for(const l of i){const c=l.key,u=l.value;if(c.status==="aborted"||u.status==="aborted")return C;(c.status==="dirty"||u.status==="dirty")&&n.dirty(),o.set(c.value,u.value)}return{status:n.value,value:o}}}}Mn.create=(t,e,n)=>new Mn({valueType:e,keyType:t,typeName:v.ZodMap,...P(n)});class Qe extends j{_parse(e){const{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==w.set)return b(r,{code:y.invalid_type,expected:w.set,received:r.parsedType}),C;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(b(r,{code:y.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),n.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(b(r,{code:y.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),n.dirty());const a=this._def.valueType;function i(l){const c=new Set;for(const u of l){if(u.status==="aborted")return C;u.status==="dirty"&&n.dirty(),c.add(u.value)}return{status:n.value,value:c}}const o=[...r.data.values()].map((l,c)=>a._parse(new Te(r,l,r.path,c)));return r.common.async?Promise.all(o).then(l=>i(l)):i(o)}min(e,n){return new Qe({...this._def,minSize:{value:e,message:k.toString(n)}})}max(e,n){return new Qe({...this._def,maxSize:{value:e,message:k.toString(n)}})}size(e,n){return this.min(e,n).max(e,n)}nonempty(e){return this.min(1,e)}}Qe.create=(t,e)=>new Qe({valueType:t,minSize:null,maxSize:null,typeName:v.ZodSet,...P(e)});class ft extends j{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==w.function)return b(n,{code:y.invalid_type,expected:w.function,received:n.parsedType}),C;function r(o,l){return In({data:o,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Cn(),yt].filter(c=>!!c),issueData:{code:y.invalid_arguments,argumentsError:l}})}function s(o,l){return In({data:o,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Cn(),yt].filter(c=>!!c),issueData:{code:y.invalid_return_type,returnTypeError:l}})}const a={errorMap:n.common.contextualErrorMap},i=n.data;if(this._def.returns instanceof _t){const o=this;return le(async function(...l){const c=new de([]),u=await o._def.args.parseAsync(l,a).catch(h=>{throw c.addIssue(r(l,h)),c}),d=await Reflect.apply(i,this,u);return await o._def.returns._def.type.parseAsync(d,a).catch(h=>{throw c.addIssue(s(d,h)),c})})}else{const o=this;return le(function(...l){const c=o._def.args.safeParse(l,a);if(!c.success)throw new de([r(l,c.error)]);const u=Reflect.apply(i,this,c.data),d=o._def.returns.safeParse(u,a);if(!d.success)throw new de([s(u,d.error)]);return d.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new ft({...this._def,args:Ee.create(e).rest(Ye.create())})}returns(e){return new ft({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,n,r){return new ft({args:e||Ee.create([]).rest(Ye.create()),returns:n||Ye.create(),typeName:v.ZodFunction,...P(r)})}}class Ft extends j{get schema(){return this._def.getter()}_parse(e){const{ctx:n}=this._processInputParams(e);return this._def.getter()._parse({data:n.data,path:n.path,parent:n})}}Ft.create=(t,e)=>new Ft({getter:t,typeName:v.ZodLazy,...P(e)});class Ut extends j{_parse(e){if(e.data!==this._def.value){const n=this._getOrReturnCtx(e);return b(n,{received:n.data,code:y.invalid_literal,expected:this._def.value}),C}return{status:"valid",value:e.data}}get value(){return this._def.value}}Ut.create=(t,e)=>new Ut({value:t,typeName:v.ZodLiteral,...P(e)});function Aa(t,e){return new Fe({values:t,typeName:v.ZodEnum,...P(e)})}class Fe extends j{constructor(){super(...arguments),Ct.set(this,void 0)}_parse(e){if(typeof e.data!="string"){const n=this._getOrReturnCtx(e),r=this._def.values;return b(n,{expected:Z.joinValues(r),received:n.parsedType,code:y.invalid_type}),C}if(An(this,Ct,"f")||Ta(this,Ct,new Set(this._def.values),"f"),!An(this,Ct,"f").has(e.data)){const n=this._getOrReturnCtx(e),r=this._def.values;return b(n,{received:n.data,code:y.invalid_enum_value,options:r}),C}return le(e.data)}get options(){return this._def.values}get enum(){const e={};for(const n of this._def.values)e[n]=n;return e}get Values(){const e={};for(const n of this._def.values)e[n]=n;return e}get Enum(){const e={};for(const n of this._def.values)e[n]=n;return e}extract(e,n=this._def){return Fe.create(e,{...this._def,...n})}exclude(e,n=this._def){return Fe.create(this.options.filter(r=>!e.includes(r)),{...this._def,...n})}}Ct=new WeakMap;Fe.create=Aa;class Vt extends j{constructor(){super(...arguments),It.set(this,void 0)}_parse(e){const n=Z.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==w.string&&r.parsedType!==w.number){const s=Z.objectValues(n);return b(r,{expected:Z.joinValues(s),received:r.parsedType,code:y.invalid_type}),C}if(An(this,It,"f")||Ta(this,It,new Set(Z.getValidEnumValues(this._def.values)),"f"),!An(this,It,"f").has(e.data)){const s=Z.objectValues(n);return b(r,{received:r.data,code:y.invalid_enum_value,options:s}),C}return le(e.data)}get enum(){return this._def.values}}It=new WeakMap;Vt.create=(t,e)=>new Vt({values:t,typeName:v.ZodNativeEnum,...P(e)});class _t extends j{unwrap(){return this._def.type}_parse(e){const{ctx:n}=this._processInputParams(e);if(n.parsedType!==w.promise&&n.common.async===!1)return b(n,{code:y.invalid_type,expected:w.promise,received:n.parsedType}),C;const r=n.parsedType===w.promise?n.data:Promise.resolve(n.data);return le(r.then(s=>this._def.type.parseAsync(s,{path:n.path,errorMap:n.common.contextualErrorMap})))}}_t.create=(t,e)=>new _t({type:t,typeName:v.ZodPromise,...P(e)});class _e extends j{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===v.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:n,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{b(r,i),i.fatal?n.abort():n.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(n.value==="aborted")return C;const l=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return l.status==="aborted"?C:l.status==="dirty"||n.value==="dirty"?ut(l.value):l});{if(n.value==="aborted")return C;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?C:o.status==="dirty"||n.value==="dirty"?ut(o.value):o}}if(s.type==="refinement"){const i=o=>{const l=s.refinement(o,a);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?C:(o.status==="dirty"&&n.dirty(),i(o.value),{status:n.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?C:(o.status==="dirty"&&n.dirty(),i(o.value).then(()=>({status:n.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!Ke(i))return i;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:n.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>Ke(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:n.value,value:o})):i);Z.assertNever(s)}}_e.create=(t,e,n)=>new _e({schema:t,typeName:v.ZodEffects,effect:e,...P(n)});_e.createWithPreprocess=(t,e,n)=>new _e({schema:e,effect:{type:"preprocess",transform:t},typeName:v.ZodEffects,...P(n)});class ve extends j{_parse(e){return this._getType(e)===w.undefined?le(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}ve.create=(t,e)=>new ve({innerType:t,typeName:v.ZodOptional,...P(e)});class Ue extends j{_parse(e){return this._getType(e)===w.null?le(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ue.create=(t,e)=>new Ue({innerType:t,typeName:v.ZodNullable,...P(e)});class Bt extends j{_parse(e){const{ctx:n}=this._processInputParams(e);let r=n.data;return n.parsedType===w.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:n.path,parent:n})}removeDefault(){return this._def.innerType}}Bt.create=(t,e)=>new Bt({innerType:t,typeName:v.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...P(e)});class zt extends j{_parse(e){const{ctx:n}=this._processInputParams(e),r={...n,common:{...n.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return Ot(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new de(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new de(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}zt.create=(t,e)=>new zt({innerType:t,typeName:v.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...P(e)});class On extends j{_parse(e){if(this._getType(e)!==w.nan){const r=this._getOrReturnCtx(e);return b(r,{code:y.invalid_type,expected:w.nan,received:r.parsedType}),C}return{status:"valid",value:e.data}}}On.create=t=>new On({typeName:v.ZodNaN,...P(t)});const wl=Symbol("zod_brand");class Cr extends j{_parse(e){const{ctx:n}=this._processInputParams(e),r=n.data;return this._def.type._parse({data:r,path:n.path,parent:n})}unwrap(){return this._def.type}}class gn extends j{_parse(e){const{status:n,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?C:a.status==="dirty"?(n.dirty(),ut(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?C:s.status==="dirty"?(n.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,n){return new gn({in:e,out:n,typeName:v.ZodPipeline})}}class qt extends j{_parse(e){const n=this._def.innerType._parse(e),r=s=>(Ke(s)&&(s.value=Object.freeze(s.value)),s);return Ot(n)?n.then(s=>r(s)):r(n)}unwrap(){return this._def.innerType}}qt.create=(t,e)=>new qt({innerType:t,typeName:v.ZodReadonly,...P(e)});function Na(t,e={},n){return t?vt.create().superRefine((r,s)=>{var a,i;if(!t(r)){const o=typeof e=="function"?e(r):typeof e=="string"?{message:e}:e,l=(i=(a=o.fatal)!==null&&a!==void 0?a:n)!==null&&i!==void 0?i:!0,c=typeof o=="string"?{message:o}:o;s.addIssue({code:"custom",...c,fatal:l})}}):vt.create()}const Sl={object:H.lazycreate};var v;(function(t){t.ZodString="ZodString",t.ZodNumber="ZodNumber",t.ZodNaN="ZodNaN",t.ZodBigInt="ZodBigInt",t.ZodBoolean="ZodBoolean",t.ZodDate="ZodDate",t.ZodSymbol="ZodSymbol",t.ZodUndefined="ZodUndefined",t.ZodNull="ZodNull",t.ZodAny="ZodAny",t.ZodUnknown="ZodUnknown",t.ZodNever="ZodNever",t.ZodVoid="ZodVoid",t.ZodArray="ZodArray",t.ZodObject="ZodObject",t.ZodUnion="ZodUnion",t.ZodDiscriminatedUnion="ZodDiscriminatedUnion",t.ZodIntersection="ZodIntersection",t.ZodTuple="ZodTuple",t.ZodRecord="ZodRecord",t.ZodMap="ZodMap",t.ZodSet="ZodSet",t.ZodFunction="ZodFunction",t.ZodLazy="ZodLazy",t.ZodLiteral="ZodLiteral",t.ZodEnum="ZodEnum",t.ZodEffects="ZodEffects",t.ZodNativeEnum="ZodNativeEnum",t.ZodOptional="ZodOptional",t.ZodNullable="ZodNullable",t.ZodDefault="ZodDefault",t.ZodCatch="ZodCatch",t.ZodPromise="ZodPromise",t.ZodBranded="ZodBranded",t.ZodPipeline="ZodPipeline",t.ZodReadonly="ZodReadonly"})(v||(v={}));const xl=(t,e={message:`Input not instance of ${t.name}`})=>Na(n=>n instanceof t,e),Ra=ge.create,Ma=Le.create,kl=On.create,Tl=Ze.create,Oa=Pt.create,El=Xe.create,Cl=Nn.create,Il=jt.create,Al=$t.create,Nl=vt.create,Rl=Ye.create,Ml=Me.create,Ol=Rn.create,Pl=ye.create,jl=H.create,$l=H.strictCreate,Dl=Dt.create,Ll=qn.create,Zl=Lt.create,Fl=Ee.create,Ul=Zt.create,Vl=Mn.create,Bl=Qe.create,zl=ft.create,ql=Ft.create,Gl=Ut.create,Jl=Fe.create,Hl=Vt.create,Wl=_t.create,ls=_e.create,Yl=ve.create,Kl=Ue.create,Xl=_e.createWithPreprocess,Ql=gn.create,ec=()=>Ra().optional(),tc=()=>Ma().optional(),nc=()=>Oa().optional(),rc={string:t=>ge.create({...t,coerce:!0}),number:t=>Le.create({...t,coerce:!0}),boolean:t=>Pt.create({...t,coerce:!0}),bigint:t=>Ze.create({...t,coerce:!0}),date:t=>Xe.create({...t,coerce:!0})},sc=C;var f=Object.freeze({__proto__:null,defaultErrorMap:yt,setErrorMap:Xo,getErrorMap:Cn,makeIssue:In,EMPTY_PATH:Qo,addIssueToContext:b,ParseStatus:ie,INVALID:C,DIRTY:ut,OK:le,isAborted:cr,isDirty:ur,isValid:Ke,isAsync:Ot,get util(){return Z},get objectUtil(){return lr},ZodParsedType:w,getParsedType:Ne,ZodType:j,datetimeRegex:Ia,ZodString:ge,ZodNumber:Le,ZodBigInt:Ze,ZodBoolean:Pt,ZodDate:Xe,ZodSymbol:Nn,ZodUndefined:jt,ZodNull:$t,ZodAny:vt,ZodUnknown:Ye,ZodNever:Me,ZodVoid:Rn,ZodArray:ye,ZodObject:H,ZodUnion:Dt,ZodDiscriminatedUnion:qn,ZodIntersection:Lt,ZodTuple:Ee,ZodRecord:Zt,ZodMap:Mn,ZodSet:Qe,ZodFunction:ft,ZodLazy:Ft,ZodLiteral:Ut,ZodEnum:Fe,ZodNativeEnum:Vt,ZodPromise:_t,ZodEffects:_e,ZodTransformer:_e,ZodOptional:ve,ZodNullable:Ue,ZodDefault:Bt,ZodCatch:zt,ZodNaN:On,BRAND:wl,ZodBranded:Cr,ZodPipeline:gn,ZodReadonly:qt,custom:Na,Schema:j,ZodSchema:j,late:Sl,get ZodFirstPartyTypeKind(){return v},coerce:rc,any:Nl,array:Pl,bigint:Tl,boolean:Oa,date:El,discriminatedUnion:Ll,effect:ls,enum:Jl,function:zl,instanceof:xl,intersection:Zl,lazy:ql,literal:Gl,map:Vl,nan:kl,nativeEnum:Hl,never:Ml,null:Al,nullable:Kl,number:Ma,object:jl,oboolean:nc,onumber:tc,optional:Yl,ostring:ec,pipeline:Ql,preprocess:Xl,promise:Wl,record:Ul,set:Bl,strictObject:$l,string:Ra,symbol:Cl,transformer:ls,tuple:Fl,undefined:Il,union:Dl,unknown:Rl,void:Ol,NEVER:sc,ZodIssueCode:y,quotelessJson:Ko,ZodError:de});function ac(){return{}}function ic(t,e){var r,s,a;const n={type:"array"};return(r=t.type)!=null&&r._def&&((a=(s=t.type)==null?void 0:s._def)==null?void 0:a.typeName)!==v.ZodAny&&(n.items=U(t.type._def,{...e,currentPath:[...e.currentPath,"items"]})),t.minLength&&B(n,"minItems",t.minLength.value,t.minLength.message,e),t.maxLength&&B(n,"maxItems",t.maxLength.value,t.maxLength.message,e),t.exactLength&&(B(n,"minItems",t.exactLength.value,t.exactLength.message,e),B(n,"maxItems",t.exactLength.value,t.exactLength.message,e)),n}function oc(t,e){const n={type:"integer",format:"int64"};if(!t.checks)return n;for(const r of t.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?B(n,"minimum",r.value,r.message,e):B(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),B(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?B(n,"maximum",r.value,r.message,e):B(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),B(n,"maximum",r.value,r.message,e));break;case"multipleOf":B(n,"multipleOf",r.value,r.message,e);break}return n}function lc(){return{type:"boolean"}}function Pa(t,e){return U(t.type._def,e)}const cc=(t,e)=>U(t.innerType._def,e);function ja(t,e,n){const r=n??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>ja(t,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return uc(t,e)}}const uc=(t,e)=>{const n={type:"integer",format:"unix-time"};if(e.target==="openApi3")return n;for(const r of t.checks)switch(r.kind){case"min":B(n,"minimum",r.value,r.message,e);break;case"max":B(n,"maximum",r.value,r.message,e);break}return n};function dc(t,e){return{...U(t.innerType._def,e),default:t.defaultValue()}}function pc(t,e){return e.effectStrategy==="input"?U(t.schema._def,e):{}}function fc(t){return{type:"string",enum:Array.from(t.values)}}const hc=t=>"type"in t&&t.type==="string"?!1:"allOf"in t;function mc(t,e){const n=[U(t.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),U(t.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return n.forEach(a=>{if(hc(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...l}=a;i=l}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function gc(t,e){const n=typeof t.value;return n!=="bigint"&&n!=="number"&&n!=="boolean"&&n!=="string"?{type:Array.isArray(t.value)?"array":"object"}:e.target==="openApi3"?{type:n==="bigint"?"integer":n,enum:[t.value]}:{type:n==="bigint"?"integer":n,const:t.value}}let Qn;const fe={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(Qn===void 0&&(Qn=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Qn),uuid:/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,ipv4:/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,ipv4Cidr:/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,ipv6:/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,ipv6Cidr:/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,base64url:/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/,jwt:/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/};function $a(t,e){const n={type:"string"};if(t.checks)for(const r of t.checks)switch(r.kind){case"min":B(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,r.value):r.value,r.message,e);break;case"max":B(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,r.value):r.value,r.message,e);break;case"email":switch(e.emailStrategy){case"format:email":he(n,"email",r.message,e);break;case"format:idn-email":he(n,"idn-email",r.message,e);break;case"pattern:zod":oe(n,fe.email,r.message,e);break}break;case"url":he(n,"uri",r.message,e);break;case"uuid":he(n,"uuid",r.message,e);break;case"regex":oe(n,r.regex,r.message,e);break;case"cuid":oe(n,fe.cuid,r.message,e);break;case"cuid2":oe(n,fe.cuid2,r.message,e);break;case"startsWith":oe(n,RegExp(`^${er(r.value,e)}`),r.message,e);break;case"endsWith":oe(n,RegExp(`${er(r.value,e)}$`),r.message,e);break;case"datetime":he(n,"date-time",r.message,e);break;case"date":he(n,"date",r.message,e);break;case"time":he(n,"time",r.message,e);break;case"duration":he(n,"duration",r.message,e);break;case"length":B(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,r.value):r.value,r.message,e),B(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,r.value):r.value,r.message,e);break;case"includes":{oe(n,RegExp(er(r.value,e)),r.message,e);break}case"ip":{r.version!=="v6"&&he(n,"ipv4",r.message,e),r.version!=="v4"&&he(n,"ipv6",r.message,e);break}case"base64url":oe(n,fe.base64url,r.message,e);break;case"jwt":oe(n,fe.jwt,r.message,e);break;case"cidr":{r.version!=="v6"&&oe(n,fe.ipv4Cidr,r.message,e),r.version!=="v4"&&oe(n,fe.ipv6Cidr,r.message,e);break}case"emoji":oe(n,fe.emoji(),r.message,e);break;case"ulid":{oe(n,fe.ulid,r.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{he(n,"binary",r.message,e);break}case"contentEncoding:base64":{B(n,"contentEncoding","base64",r.message,e);break}case"pattern:zod":{oe(n,fe.base64,r.message,e);break}}break}case"nanoid":oe(n,fe.nanoid,r.message,e)}return n}function er(t,e){return e.patternStrategy==="escape"?vc(t):t}const yc=new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");function vc(t){let e="";for(let n=0;n<t.length;n++)yc.has(t[n])||(e+="\\"),e+=t[n];return e}function he(t,e,n,r){var s;t.format||(s=t.anyOf)!=null&&s.some(a=>a.format)?(t.anyOf||(t.anyOf=[]),t.format&&(t.anyOf.push({format:t.format,...t.errorMessage&&r.errorMessages&&{errorMessage:{format:t.errorMessage.format}}}),delete t.format,t.errorMessage&&(delete t.errorMessage.format,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.anyOf.push({format:e,...n&&r.errorMessages&&{errorMessage:{format:n}}})):B(t,"format",e,n,r)}function oe(t,e,n,r){var s;t.pattern||(s=t.allOf)!=null&&s.some(a=>a.pattern)?(t.allOf||(t.allOf=[]),t.pattern&&(t.allOf.push({pattern:t.pattern,...t.errorMessage&&r.errorMessages&&{errorMessage:{pattern:t.errorMessage.pattern}}}),delete t.pattern,t.errorMessage&&(delete t.errorMessage.pattern,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.allOf.push({pattern:cs(e,r),...n&&r.errorMessages&&{errorMessage:{pattern:n}}})):B(t,"pattern",cs(e,r),n,r)}function cs(t,e){var l;if(!e.applyRegexFlags||!t.flags)return t.source;const n={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},r=n.i?t.source.toLowerCase():t.source;let s="",a=!1,i=!1,o=!1;for(let c=0;c<r.length;c++){if(a){s+=r[c],a=!1;continue}if(n.i){if(i){if(r[c].match(/[a-z]/)){o?(s+=r[c],s+=`${r[c-2]}-${r[c]}`.toUpperCase(),o=!1):r[c+1]==="-"&&((l=r[c+2])!=null&&l.match(/[a-z]/))?(s+=r[c],o=!0):s+=`${r[c]}${r[c].toUpperCase()}`;continue}}else if(r[c].match(/[a-z]/)){s+=`[${r[c]}${r[c].toUpperCase()}]`;continue}}if(n.m){if(r[c]==="^"){s+=`(^|(?<=[\r
]))`;continue}else if(r[c]==="$"){s+=`($|(?=[\r
]))`;continue}}if(n.s&&r[c]==="."){s+=i?`${r[c]}\r
`:`[${r[c]}\r
]`;continue}s+=r[c],r[c]==="\\"?a=!0:i&&r[c]==="]"?i=!1:!i&&r[c]==="["&&(i=!0)}try{new RegExp(s)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return s}function Da(t,e){var r,s,a,i,o,l;if(e.target==="openAi"&&console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead."),e.target==="openApi3"&&((r=t.keyType)==null?void 0:r._def.typeName)===v.ZodEnum)return{type:"object",required:t.keyType._def.values,properties:t.keyType._def.values.reduce((c,u)=>({...c,[u]:U(t.valueType._def,{...e,currentPath:[...e.currentPath,"properties",u]})??{}}),{}),additionalProperties:!1};const n={type:"object",additionalProperties:U(t.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return n;if(((s=t.keyType)==null?void 0:s._def.typeName)===v.ZodString&&((a=t.keyType._def.checks)!=null&&a.length)){const{type:c,...u}=$a(t.keyType._def,e);return{...n,propertyNames:u}}else{if(((i=t.keyType)==null?void 0:i._def.typeName)===v.ZodEnum)return{...n,propertyNames:{enum:t.keyType._def.values}};if(((o=t.keyType)==null?void 0:o._def.typeName)===v.ZodBranded&&t.keyType._def.type._def.typeName===v.ZodString&&((l=t.keyType._def.type._def.checks)!=null&&l.length)){const{type:c,...u}=Pa(t.keyType._def,e);return{...n,propertyNames:u}}}return n}function _c(t,e){if(e.mapStrategy==="record")return Da(t,e);const n=U(t.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=U(t.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[n,r],minItems:2,maxItems:2}}}function bc(t){const e=t.values,r=Object.keys(t.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function wc(){return{not:{}}}function Sc(t){return t.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Pn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function xc(t,e){if(e.target==="openApi3")return us(t,e);const n=t.options instanceof Map?Array.from(t.options.values()):t.options;if(n.every(r=>r._def.typeName in Pn&&(!r._def.checks||!r._def.checks.length))){const r=n.reduce((s,a)=>{const i=Pn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(n.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=n.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===n.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:n.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(n.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:n.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return us(t,e)}const us=(t,e)=>{const n=(t.options instanceof Map?Array.from(t.options.values()):t.options).map((r,s)=>U(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return n.length?{anyOf:n}:void 0};function kc(t,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(t.innerType._def.typeName)&&(!t.innerType._def.checks||!t.innerType._def.checks.length))return e.target==="openApi3"?{type:Pn[t.innerType._def.typeName],nullable:!0}:{type:[Pn[t.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=U(t.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const n=U(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return n&&{anyOf:[n,{type:"null"}]}}function Tc(t,e){const n={type:"number"};if(!t.checks)return n;for(const r of t.checks)switch(r.kind){case"int":n.type="integer",xa(n,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?B(n,"minimum",r.value,r.message,e):B(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),B(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?B(n,"maximum",r.value,r.message,e):B(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),B(n,"maximum",r.value,r.message,e));break;case"multipleOf":B(n,"multipleOf",r.value,r.message,e);break}return n}function Ec(t,e){return e.removeAdditionalStrategy==="strict"?t.catchall._def.typeName==="ZodNever"?t.unknownKeys!=="strict":U(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:t.catchall._def.typeName==="ZodNever"?t.unknownKeys==="passthrough":U(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function Cc(t,e){const n=e.target==="openAi",r={type:"object",...Object.entries(t.shape()).reduce((s,[a,i])=>{if(i===void 0||i._def===void 0)return s;let o=i.isOptional();o&&n&&(i instanceof ve&&(i=i._def.innerType),i.isNullable()||(i=i.nullable()),o=!1);const l=U(i._def,{...e,currentPath:[...e.currentPath,"properties",a],propertyPath:[...e.currentPath,"properties",a]});return l===void 0?s:{properties:{...s.properties,[a]:l},required:o?s.required:[...s.required,a]}},{properties:{},required:[]}),additionalProperties:Ec(t,e)};return r.required.length||delete r.required,r}const Ic=(t,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return U(t.innerType._def,e);const n=U(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return n?{anyOf:[{not:{}},n]}:{}},Ac=(t,e)=>{if(e.pipeStrategy==="input")return U(t.in._def,e);if(e.pipeStrategy==="output")return U(t.out._def,e);const n=U(t.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=U(t.out._def,{...e,currentPath:[...e.currentPath,"allOf",n?"1":"0"]});return{allOf:[n,r].filter(s=>s!==void 0)}};function Nc(t,e){return U(t.type._def,e)}function Rc(t,e){const r={type:"array",uniqueItems:!0,items:U(t.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return t.minSize&&B(r,"minItems",t.minSize.value,t.minSize.message,e),t.maxSize&&B(r,"maxItems",t.maxSize.value,t.maxSize.message,e),r}function Mc(t,e){return t.rest?{type:"array",minItems:t.items.length,items:t.items.map((n,r)=>U(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[]),additionalItems:U(t.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:t.items.length,maxItems:t.items.length,items:t.items.map((n,r)=>U(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[])}}function Oc(){return{not:{}}}function Pc(){return{}}const jc=(t,e)=>U(t.innerType._def,e);function U(t,e,n=!1){var i;const r=e.seen.get(t);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,t,e,r,n);if(o!==Ho)return o}if(r&&!n){const o=$c(r,e);if(o!==void 0)return o}const s={def:t,path:e.currentPath,jsonSchema:void 0};e.seen.set(t,s);const a=Lc(t,t.typeName,e);return a&&Zc(t,e,a),s.jsonSchema=a,a}const $c=(t,e)=>{switch(e.$refStrategy){case"root":return{$ref:t.path.join("/")};case"relative":return{$ref:Dc(e.currentPath,t.path)};case"none":case"seen":return t.path.length<e.currentPath.length&&t.path.every((n,r)=>e.currentPath[r]===n)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},Dc=(t,e)=>{let n=0;for(;n<t.length&&n<e.length&&t[n]===e[n];n++);return[(t.length-n).toString(),...e.slice(n)].join("/")},Lc=(t,e,n)=>{switch(e){case v.ZodString:return $a(t,n);case v.ZodNumber:return Tc(t,n);case v.ZodObject:return Cc(t,n);case v.ZodBigInt:return oc(t,n);case v.ZodBoolean:return lc();case v.ZodDate:return ja(t,n);case v.ZodUndefined:return Oc();case v.ZodNull:return Sc(n);case v.ZodArray:return ic(t,n);case v.ZodUnion:case v.ZodDiscriminatedUnion:return xc(t,n);case v.ZodIntersection:return mc(t,n);case v.ZodTuple:return Mc(t,n);case v.ZodRecord:return Da(t,n);case v.ZodLiteral:return gc(t,n);case v.ZodEnum:return fc(t);case v.ZodNativeEnum:return bc(t);case v.ZodNullable:return kc(t,n);case v.ZodOptional:return Ic(t,n);case v.ZodMap:return _c(t,n);case v.ZodSet:return Rc(t,n);case v.ZodLazy:return U(t.getter()._def,n);case v.ZodPromise:return Nc(t,n);case v.ZodNaN:case v.ZodNever:return wc();case v.ZodEffects:return pc(t,n);case v.ZodAny:return ac();case v.ZodUnknown:return Pc();case v.ZodDefault:return dc(t,n);case v.ZodBranded:return Pa(t,n);case v.ZodReadonly:return jc(t,n);case v.ZodCatch:return cc(t,n);case v.ZodPipeline:return Ac(t,n);case v.ZodFunction:case v.ZodVoid:case v.ZodSymbol:return;default:return(r=>{})()}},Zc=(t,e,n)=>(t.description&&(n.description=t.description,e.markdownDescription&&(n.markdownDescription=t.description)),n),Fc=(t,e)=>{const n=Yo(e),r=typeof e=="object"&&e.definitions?Object.entries(e.definitions).reduce((l,[c,u])=>({...l,[c]:U(u._def,{...n,currentPath:[...n.basePath,n.definitionPath,c]},!0)??{}}),{}):void 0,s=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,a=U(t._def,s===void 0?n:{...n,currentPath:[...n.basePath,n.definitionPath,s]},!1)??{},i=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;i!==void 0&&(a.title=i);const o=s===void 0?r?{...a,[n.definitionPath]:r}:a:{$ref:[...n.$refStrategy==="relative"?[]:n.basePath,n.definitionPath,s].join("/"),[n.definitionPath]:{...r,[s]:a}};return n.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":(n.target==="jsonSchema2019-09"||n.target==="openAi")&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),n.target==="openAi"&&("anyOf"in o||"oneOf"in o||"allOf"in o||"type"in o&&Array.isArray(o.type))&&console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property."),o};var Gt={code:"0",name:"text",parse:t=>{if(typeof t!="string")throw new Error('"text" parts expect a string value.');return{type:"text",value:t}}},Jt={code:"3",name:"error",parse:t=>{if(typeof t!="string")throw new Error('"error" parts expect a string value.');return{type:"error",value:t}}},Ht={code:"4",name:"assistant_message",parse:t=>{if(t==null||typeof t!="object"||!("id"in t)||!("role"in t)||!("content"in t)||typeof t.id!="string"||typeof t.role!="string"||t.role!=="assistant"||!Array.isArray(t.content)||!t.content.every(e=>e!=null&&typeof e=="object"&&"type"in e&&e.type==="text"&&"text"in e&&e.text!=null&&typeof e.text=="object"&&"value"in e.text&&typeof e.text.value=="string"))throw new Error('"assistant_message" parts expect an object with an "id", "role", and "content" property.');return{type:"assistant_message",value:t}}},Wt={code:"5",name:"assistant_control_data",parse:t=>{if(t==null||typeof t!="object"||!("threadId"in t)||!("messageId"in t)||typeof t.threadId!="string"||typeof t.messageId!="string")throw new Error('"assistant_control_data" parts expect an object with a "threadId" and "messageId" property.');return{type:"assistant_control_data",value:{threadId:t.threadId,messageId:t.messageId}}}},Yt={code:"6",name:"data_message",parse:t=>{if(t==null||typeof t!="object"||!("role"in t)||!("data"in t)||typeof t.role!="string"||t.role!=="data")throw new Error('"data_message" parts expect an object with a "role" and "data" property.');return{type:"data_message",value:t}}},Uc=[Gt,Jt,Ht,Wt,Yt];Gt.code+"",Jt.code+"",Ht.code+"",Wt.code+"",Yt.code+"";Gt.name+"",Gt.code,Jt.name+"",Jt.code,Ht.name+"",Ht.code,Wt.name+"",Wt.code,Yt.name+"",Yt.code;Uc.map(t=>t.code);function Vc(t){const e=["ROOT"];let n=-1,r=null;function s(l,c,u){switch(l){case'"':{n=c,e.pop(),e.push(u),e.push("INSIDE_STRING");break}case"f":case"t":case"n":{n=c,r=c,e.pop(),e.push(u),e.push("INSIDE_LITERAL");break}case"-":{e.pop(),e.push(u),e.push("INSIDE_NUMBER");break}case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":{n=c,e.pop(),e.push(u),e.push("INSIDE_NUMBER");break}case"{":{n=c,e.pop(),e.push(u),e.push("INSIDE_OBJECT_START");break}case"[":{n=c,e.pop(),e.push(u),e.push("INSIDE_ARRAY_START");break}}}function a(l,c){switch(l){case",":{e.pop(),e.push("INSIDE_OBJECT_AFTER_COMMA");break}case"}":{n=c,e.pop();break}}}function i(l,c){switch(l){case",":{e.pop(),e.push("INSIDE_ARRAY_AFTER_COMMA");break}case"]":{n=c,e.pop();break}}}for(let l=0;l<t.length;l++){const c=t[l];switch(e[e.length-1]){case"ROOT":s(c,l,"FINISH");break;case"INSIDE_OBJECT_START":{switch(c){case'"':{e.pop(),e.push("INSIDE_OBJECT_KEY");break}case"}":{n=l,e.pop();break}}break}case"INSIDE_OBJECT_AFTER_COMMA":{switch(c){case'"':{e.pop(),e.push("INSIDE_OBJECT_KEY");break}}break}case"INSIDE_OBJECT_KEY":{switch(c){case'"':{e.pop(),e.push("INSIDE_OBJECT_AFTER_KEY");break}}break}case"INSIDE_OBJECT_AFTER_KEY":{switch(c){case":":{e.pop(),e.push("INSIDE_OBJECT_BEFORE_VALUE");break}}break}case"INSIDE_OBJECT_BEFORE_VALUE":{s(c,l,"INSIDE_OBJECT_AFTER_VALUE");break}case"INSIDE_OBJECT_AFTER_VALUE":{a(c,l);break}case"INSIDE_STRING":{switch(c){case'"':{e.pop(),n=l;break}case"\\":{e.push("INSIDE_STRING_ESCAPE");break}default:n=l}break}case"INSIDE_ARRAY_START":{switch(c){case"]":{n=l,e.pop();break}default:{n=l,s(c,l,"INSIDE_ARRAY_AFTER_VALUE");break}}break}case"INSIDE_ARRAY_AFTER_VALUE":{switch(c){case",":{e.pop(),e.push("INSIDE_ARRAY_AFTER_COMMA");break}case"]":{n=l,e.pop();break}default:{n=l;break}}break}case"INSIDE_ARRAY_AFTER_COMMA":{s(c,l,"INSIDE_ARRAY_AFTER_VALUE");break}case"INSIDE_STRING_ESCAPE":{e.pop(),n=l;break}case"INSIDE_NUMBER":{switch(c){case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":{n=l;break}case"e":case"E":case"-":case".":break;case",":{e.pop(),e[e.length-1]==="INSIDE_ARRAY_AFTER_VALUE"&&i(c,l),e[e.length-1]==="INSIDE_OBJECT_AFTER_VALUE"&&a(c,l);break}case"}":{e.pop(),e[e.length-1]==="INSIDE_OBJECT_AFTER_VALUE"&&a(c,l);break}case"]":{e.pop(),e[e.length-1]==="INSIDE_ARRAY_AFTER_VALUE"&&i(c,l);break}default:{e.pop();break}}break}case"INSIDE_LITERAL":{const d=t.substring(r,l+1);!"false".startsWith(d)&&!"true".startsWith(d)&&!"null".startsWith(d)?(e.pop(),e[e.length-1]==="INSIDE_OBJECT_AFTER_VALUE"?a(c,l):e[e.length-1]==="INSIDE_ARRAY_AFTER_VALUE"&&i(c,l)):n=l;break}}}let o=t.slice(0,n+1);for(let l=e.length-1;l>=0;l--)switch(e[l]){case"INSIDE_STRING":{o+='"';break}case"INSIDE_OBJECT_KEY":case"INSIDE_OBJECT_AFTER_KEY":case"INSIDE_OBJECT_AFTER_COMMA":case"INSIDE_OBJECT_START":case"INSIDE_OBJECT_BEFORE_VALUE":case"INSIDE_OBJECT_AFTER_VALUE":{o+="}";break}case"INSIDE_ARRAY_START":case"INSIDE_ARRAY_AFTER_COMMA":case"INSIDE_ARRAY_AFTER_VALUE":{o+="]";break}case"INSIDE_LITERAL":{const u=t.substring(r,t.length);"true".startsWith(u)?o+="true".slice(u.length):"false".startsWith(u)?o+="false".slice(u.length):"null".startsWith(u)&&(o+="null".slice(u.length))}}return o}function Bc(t){if(t===void 0)return{value:void 0,state:"undefined-input"};let e=gt({text:t});return e.success?{value:e.value,state:"successful-parse"}:(e=gt({text:Vc(t)}),e.success?{value:e.value,state:"repaired-parse"}:{value:void 0,state:"failed-parse"})}var Kt={code:"0",name:"text",parse:t=>{if(typeof t!="string")throw new Error('"text" parts expect a string value.');return{type:"text",value:t}}},Xt={code:"2",name:"data",parse:t=>{if(!Array.isArray(t))throw new Error('"data" parts expect an array value.');return{type:"data",value:t}}},Qt={code:"3",name:"error",parse:t=>{if(typeof t!="string")throw new Error('"error" parts expect a string value.');return{type:"error",value:t}}},en={code:"8",name:"message_annotations",parse:t=>{if(!Array.isArray(t))throw new Error('"message_annotations" parts expect an array value.');return{type:"message_annotations",value:t}}},tn={code:"9",name:"tool_call",parse:t=>{if(t==null||typeof t!="object"||!("toolCallId"in t)||typeof t.toolCallId!="string"||!("toolName"in t)||typeof t.toolName!="string"||!("args"in t)||typeof t.args!="object")throw new Error('"tool_call" parts expect an object with a "toolCallId", "toolName", and "args" property.');return{type:"tool_call",value:t}}},nn={code:"a",name:"tool_result",parse:t=>{if(t==null||typeof t!="object"||!("toolCallId"in t)||typeof t.toolCallId!="string"||!("result"in t))throw new Error('"tool_result" parts expect an object with a "toolCallId" and a "result" property.');return{type:"tool_result",value:t}}},rn={code:"b",name:"tool_call_streaming_start",parse:t=>{if(t==null||typeof t!="object"||!("toolCallId"in t)||typeof t.toolCallId!="string"||!("toolName"in t)||typeof t.toolName!="string")throw new Error('"tool_call_streaming_start" parts expect an object with a "toolCallId" and "toolName" property.');return{type:"tool_call_streaming_start",value:t}}},sn={code:"c",name:"tool_call_delta",parse:t=>{if(t==null||typeof t!="object"||!("toolCallId"in t)||typeof t.toolCallId!="string"||!("argsTextDelta"in t)||typeof t.argsTextDelta!="string")throw new Error('"tool_call_delta" parts expect an object with a "toolCallId" and "argsTextDelta" property.');return{type:"tool_call_delta",value:t}}},an={code:"d",name:"finish_message",parse:t=>{if(t==null||typeof t!="object"||!("finishReason"in t)||typeof t.finishReason!="string")throw new Error('"finish_message" parts expect an object with a "finishReason" property.');const e={finishReason:t.finishReason};return"usage"in t&&t.usage!=null&&typeof t.usage=="object"&&"promptTokens"in t.usage&&"completionTokens"in t.usage&&(e.usage={promptTokens:typeof t.usage.promptTokens=="number"?t.usage.promptTokens:Number.NaN,completionTokens:typeof t.usage.completionTokens=="number"?t.usage.completionTokens:Number.NaN}),{type:"finish_message",value:e}}},on={code:"e",name:"finish_step",parse:t=>{if(t==null||typeof t!="object"||!("finishReason"in t)||typeof t.finishReason!="string")throw new Error('"finish_step" parts expect an object with a "finishReason" property.');const e={finishReason:t.finishReason,isContinued:!1};return"usage"in t&&t.usage!=null&&typeof t.usage=="object"&&"promptTokens"in t.usage&&"completionTokens"in t.usage&&(e.usage={promptTokens:typeof t.usage.promptTokens=="number"?t.usage.promptTokens:Number.NaN,completionTokens:typeof t.usage.completionTokens=="number"?t.usage.completionTokens:Number.NaN}),"isContinued"in t&&typeof t.isContinued=="boolean"&&(e.isContinued=t.isContinued),{type:"finish_step",value:e}}},La=[Kt,Xt,Qt,en,tn,nn,rn,sn,an,on];Kt.code+"",Xt.code+"",Qt.code+"",en.code+"",tn.code+"",nn.code+"",rn.code+"",sn.code+"",an.code+"",on.code+"";Kt.name+"",Kt.code,Xt.name+"",Xt.code,Qt.name+"",Qt.code,en.name+"",en.code,tn.name+"",tn.code,nn.name+"",nn.code,rn.name+"",rn.code,sn.name+"",sn.code,an.name+"",an.code,on.name+"",on.code;La.map(t=>t.code);function Za(t,e){const n=La.find(r=>r.name===t);if(!n)throw new Error(`Invalid stream part type: ${t}`);return`${n.code}:${JSON.stringify(e)}
`}var pr=Symbol.for("vercel.ai.schema");function zc(t,{validate:e}={}){return{[pr]:!0,_type:void 0,[En]:!0,jsonSchema:t,validate:e}}function qc(t){return typeof t=="object"&&t!==null&&pr in t&&t[pr]===!0&&"jsonSchema"in t&&"validate"in t}function Gn(t){return qc(t)?t:Gc(t)}function Gc(t){return zc(Fc(t),{validate:e=>{const n=t.safeParse(e);return n.success?{success:!0,value:n.data}:{success:!1,error:n.error}}})}var Jc=typeof globalThis=="object"?globalThis:typeof self=="object"?self:typeof window=="object"?window:typeof global=="object"?global:{},We="1.9.0",ds=/^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;function Hc(t){var e=new Set([t]),n=new Set,r=t.match(ds);if(!r)return function(){return!1};var s={major:+r[1],minor:+r[2],patch:+r[3],prerelease:r[4]};if(s.prerelease!=null)return function(l){return l===t};function a(o){return n.add(o),!1}function i(o){return e.add(o),!0}return function(l){if(e.has(l))return!0;if(n.has(l))return!1;var c=l.match(ds);if(!c)return a(l);var u={major:+c[1],minor:+c[2],patch:+c[3],prerelease:c[4]};return u.prerelease!=null||s.major!==u.major?a(l):s.major===0?s.minor===u.minor&&s.patch<=u.patch?i(l):a(l):s.minor<=u.minor?i(l):a(l)}}var Wc=Hc(We),Yc=We.split(".")[0],ln=Symbol.for("opentelemetry.js.api."+Yc),cn=Jc;function Ir(t,e,n,r){var s;r===void 0&&(r=!1);var a=cn[ln]=(s=cn[ln])!==null&&s!==void 0?s:{version:We};if(!r&&a[t]){var i=new Error("@opentelemetry/api: Attempted duplicate registration of API: "+t);return n.error(i.stack||i.message),!1}if(a.version!==We){var i=new Error("@opentelemetry/api: Registration of version v"+a.version+" for "+t+" does not match previously registered API v"+We);return n.error(i.stack||i.message),!1}return a[t]=e,n.debug("@opentelemetry/api: Registered a global for "+t+" v"+We+"."),!0}function un(t){var e,n,r=(e=cn[ln])===null||e===void 0?void 0:e.version;if(!(!r||!Wc(r)))return(n=cn[ln])===null||n===void 0?void 0:n[t]}function Ar(t,e){e.debug("@opentelemetry/api: Unregistering a global for "+t+" v"+We+".");var n=cn[ln];n&&delete n[t]}var Kc=globalThis&&globalThis.__read||function(t,e){var n=typeof Symbol=="function"&&t[Symbol.iterator];if(!n)return t;var r=n.call(t),s,a=[],i;try{for(;(e===void 0||e-- >0)&&!(s=r.next()).done;)a.push(s.value)}catch(o){i={error:o}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return a},Xc=globalThis&&globalThis.__spreadArray||function(t,e,n){if(n||arguments.length===2)for(var r=0,s=e.length,a;r<s;r++)(a||!(r in e))&&(a||(a=Array.prototype.slice.call(e,0,r)),a[r]=e[r]);return t.concat(a||Array.prototype.slice.call(e))},Qc=function(){function t(e){this._namespace=e.namespace||"DiagComponentLogger"}return t.prototype.debug=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return kt("debug",this._namespace,e)},t.prototype.error=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return kt("error",this._namespace,e)},t.prototype.info=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return kt("info",this._namespace,e)},t.prototype.warn=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return kt("warn",this._namespace,e)},t.prototype.verbose=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return kt("verbose",this._namespace,e)},t}();function kt(t,e,n){var r=un("diag");if(r)return n.unshift(e),r[t].apply(r,Xc([],Kc(n),!1))}var ue;(function(t){t[t.NONE=0]="NONE",t[t.ERROR=30]="ERROR",t[t.WARN=50]="WARN",t[t.INFO=60]="INFO",t[t.DEBUG=70]="DEBUG",t[t.VERBOSE=80]="VERBOSE",t[t.ALL=9999]="ALL"})(ue||(ue={}));function eu(t,e){t<ue.NONE?t=ue.NONE:t>ue.ALL&&(t=ue.ALL),e=e||{};function n(r,s){var a=e[r];return typeof a=="function"&&t>=s?a.bind(e):function(){}}return{error:n("error",ue.ERROR),warn:n("warn",ue.WARN),info:n("info",ue.INFO),debug:n("debug",ue.DEBUG),verbose:n("verbose",ue.VERBOSE)}}var tu=globalThis&&globalThis.__read||function(t,e){var n=typeof Symbol=="function"&&t[Symbol.iterator];if(!n)return t;var r=n.call(t),s,a=[],i;try{for(;(e===void 0||e-- >0)&&!(s=r.next()).done;)a.push(s.value)}catch(o){i={error:o}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return a},nu=globalThis&&globalThis.__spreadArray||function(t,e,n){if(n||arguments.length===2)for(var r=0,s=e.length,a;r<s;r++)(a||!(r in e))&&(a||(a=Array.prototype.slice.call(e,0,r)),a[r]=e[r]);return t.concat(a||Array.prototype.slice.call(e))},ru="diag",jn=function(){function t(){function e(s){return function(){for(var a=[],i=0;i<arguments.length;i++)a[i]=arguments[i];var o=un("diag");if(o)return o[s].apply(o,nu([],tu(a),!1))}}var n=this,r=function(s,a){var i,o,l;if(a===void 0&&(a={logLevel:ue.INFO}),s===n){var c=new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");return n.error((i=c.stack)!==null&&i!==void 0?i:c.message),!1}typeof a=="number"&&(a={logLevel:a});var u=un("diag"),d=eu((o=a.logLevel)!==null&&o!==void 0?o:ue.INFO,s);if(u&&!a.suppressOverrideMessage){var p=(l=new Error().stack)!==null&&l!==void 0?l:"<failed to generate stacktrace>";u.warn("Current logger will be overwritten from "+p),d.warn("Current logger will overwrite one already registered from "+p)}return Ir("diag",d,n,!0)};n.setLogger=r,n.disable=function(){Ar(ru,n)},n.createComponentLogger=function(s){return new Qc(s)},n.verbose=e("verbose"),n.debug=e("debug"),n.info=e("info"),n.warn=e("warn"),n.error=e("error")}return t.instance=function(){return this._instance||(this._instance=new t),this._instance},t}();function su(t){return Symbol.for(t)}var au=function(){function t(e){var n=this;n._currentContext=e?new Map(e):new Map,n.getValue=function(r){return n._currentContext.get(r)},n.setValue=function(r,s){var a=new t(n._currentContext);return a._currentContext.set(r,s),a},n.deleteValue=function(r){var s=new t(n._currentContext);return s._currentContext.delete(r),s}}return t}(),iu=new au,ou=globalThis&&globalThis.__read||function(t,e){var n=typeof Symbol=="function"&&t[Symbol.iterator];if(!n)return t;var r=n.call(t),s,a=[],i;try{for(;(e===void 0||e-- >0)&&!(s=r.next()).done;)a.push(s.value)}catch(o){i={error:o}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return a},lu=globalThis&&globalThis.__spreadArray||function(t,e,n){if(n||arguments.length===2)for(var r=0,s=e.length,a;r<s;r++)(a||!(r in e))&&(a||(a=Array.prototype.slice.call(e,0,r)),a[r]=e[r]);return t.concat(a||Array.prototype.slice.call(e))},cu=function(){function t(){}return t.prototype.active=function(){return iu},t.prototype.with=function(e,n,r){for(var s=[],a=3;a<arguments.length;a++)s[a-3]=arguments[a];return n.call.apply(n,lu([r],ou(s),!1))},t.prototype.bind=function(e,n){return n},t.prototype.enable=function(){return this},t.prototype.disable=function(){return this},t}(),uu=globalThis&&globalThis.__read||function(t,e){var n=typeof Symbol=="function"&&t[Symbol.iterator];if(!n)return t;var r=n.call(t),s,a=[],i;try{for(;(e===void 0||e-- >0)&&!(s=r.next()).done;)a.push(s.value)}catch(o){i={error:o}}finally{try{s&&!s.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return a},du=globalThis&&globalThis.__spreadArray||function(t,e,n){if(n||arguments.length===2)for(var r=0,s=e.length,a;r<s;r++)(a||!(r in e))&&(a||(a=Array.prototype.slice.call(e,0,r)),a[r]=e[r]);return t.concat(a||Array.prototype.slice.call(e))},tr="context",pu=new cu,Fa=function(){function t(){}return t.getInstance=function(){return this._instance||(this._instance=new t),this._instance},t.prototype.setGlobalContextManager=function(e){return Ir(tr,e,jn.instance())},t.prototype.active=function(){return this._getContextManager().active()},t.prototype.with=function(e,n,r){for(var s,a=[],i=3;i<arguments.length;i++)a[i-3]=arguments[i];return(s=this._getContextManager()).with.apply(s,du([e,n,r],uu(a),!1))},t.prototype.bind=function(e,n){return this._getContextManager().bind(e,n)},t.prototype._getContextManager=function(){return un(tr)||pu},t.prototype.disable=function(){this._getContextManager().disable(),Ar(tr,jn.instance())},t}(),fr;(function(t){t[t.NONE=0]="NONE",t[t.SAMPLED=1]="SAMPLED"})(fr||(fr={}));var Ua="0000000000000000",Va="00000000000000000000000000000000",fu={traceId:Va,spanId:Ua,traceFlags:fr.NONE},At=function(){function t(e){e===void 0&&(e=fu),this._spanContext=e}return t.prototype.spanContext=function(){return this._spanContext},t.prototype.setAttribute=function(e,n){return this},t.prototype.setAttributes=function(e){return this},t.prototype.addEvent=function(e,n){return this},t.prototype.addLink=function(e){return this},t.prototype.addLinks=function(e){return this},t.prototype.setStatus=function(e){return this},t.prototype.updateName=function(e){return this},t.prototype.end=function(e){},t.prototype.isRecording=function(){return!1},t.prototype.recordException=function(e,n){},t}(),Nr=su("OpenTelemetry Context Key SPAN");function Rr(t){return t.getValue(Nr)||void 0}function hu(){return Rr(Fa.getInstance().active())}function Mr(t,e){return t.setValue(Nr,e)}function mu(t){return t.deleteValue(Nr)}function gu(t,e){return Mr(t,new At(e))}function Ba(t){var e;return(e=Rr(t))===null||e===void 0?void 0:e.spanContext()}var yu=/^([0-9a-f]{32})$/i,vu=/^[0-9a-f]{16}$/i;function _u(t){return yu.test(t)&&t!==Va}function bu(t){return vu.test(t)&&t!==Ua}function za(t){return _u(t.traceId)&&bu(t.spanId)}function wu(t){return new At(t)}var nr=Fa.getInstance(),qa=function(){function t(){}return t.prototype.startSpan=function(e,n,r){r===void 0&&(r=nr.active());var s=!!(n!=null&&n.root);if(s)return new At;var a=r&&Ba(r);return Su(a)&&za(a)?new At(a):new At},t.prototype.startActiveSpan=function(e,n,r,s){var a,i,o;if(!(arguments.length<2)){arguments.length===2?o=n:arguments.length===3?(a=n,o=r):(a=n,i=r,o=s);var l=i??nr.active(),c=this.startSpan(e,a,l),u=Mr(l,c);return nr.with(u,o,void 0,c)}},t}();function Su(t){return typeof t=="object"&&typeof t.spanId=="string"&&typeof t.traceId=="string"&&typeof t.traceFlags=="number"}var xu=new qa,ku=function(){function t(e,n,r,s){this._provider=e,this.name=n,this.version=r,this.options=s}return t.prototype.startSpan=function(e,n,r){return this._getTracer().startSpan(e,n,r)},t.prototype.startActiveSpan=function(e,n,r,s){var a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)},t.prototype._getTracer=function(){if(this._delegate)return this._delegate;var e=this._provider.getDelegateTracer(this.name,this.version,this.options);return e?(this._delegate=e,this._delegate):xu},t}(),Tu=function(){function t(){}return t.prototype.getTracer=function(e,n,r){return new qa},t}(),Eu=new Tu,ps=function(){function t(){}return t.prototype.getTracer=function(e,n,r){var s;return(s=this.getDelegateTracer(e,n,r))!==null&&s!==void 0?s:new ku(this,e,n,r)},t.prototype.getDelegate=function(){var e;return(e=this._delegate)!==null&&e!==void 0?e:Eu},t.prototype.setDelegate=function(e){this._delegate=e},t.prototype.getDelegateTracer=function(e,n,r){var s;return(s=this._delegate)===null||s===void 0?void 0:s.getTracer(e,n,r)},t}(),$n;(function(t){t[t.UNSET=0]="UNSET",t[t.OK=1]="OK",t[t.ERROR=2]="ERROR"})($n||($n={}));var rr="trace",Cu=function(){function t(){this._proxyTracerProvider=new ps,this.wrapSpanContext=wu,this.isSpanContextValid=za,this.deleteSpan=mu,this.getSpan=Rr,this.getActiveSpan=hu,this.getSpanContext=Ba,this.setSpan=Mr,this.setSpanContext=gu}return t.getInstance=function(){return this._instance||(this._instance=new t),this._instance},t.prototype.setGlobalTracerProvider=function(e){var n=Ir(rr,this._proxyTracerProvider,jn.instance());return n&&this._proxyTracerProvider.setDelegate(e),n},t.prototype.getTracerProvider=function(){return un(rr)||this._proxyTracerProvider},t.prototype.getTracer=function(e,n){return this.getTracerProvider().getTracer(e,n)},t.prototype.disable=function(){Ar(rr,jn.instance()),this._proxyTracerProvider=new ps},t}(),Iu=Cu.getInstance(),Au=Object.defineProperty,Or=(t,e)=>{for(var n in e)Au(t,n,{get:e[n],enumerable:!0})};function Ga(t,{contentType:e,dataStreamVersion:n}){const r=new Headers(t??{});return r.has("Content-Type")||r.set("Content-Type",e),n!==void 0&&r.set("X-Vercel-AI-Data-Stream",n),r}var Ja="AI_InvalidArgumentError",Ha=`vercel.ai.error.${Ja}`,Nu=Symbol.for(Ha),Wa,me=class extends O{constructor({parameter:t,value:e,message:n}){super({name:Ja,message:`Invalid argument for parameter ${t}: ${n}`}),this[Wa]=!0,this.parameter=t,this.value=e}static isInstance(t){return O.hasMarker(t,Ha)}};Wa=Nu;async function Ru(t){return t==null?Promise.resolve():new Promise(e=>setTimeout(e,t))}var Ya="AI_RetryError",Ka=`vercel.ai.error.${Ya}`,Mu=Symbol.for(Ka),Xa,fs=class extends O{constructor({message:t,reason:e,errors:n}){super({name:Ya,message:t}),this[Xa]=!0,this.reason=e,this.errors=n,this.lastError=n[n.length-1]}static isInstance(t){return O.hasMarker(t,Ka)}};Xa=Mu;var Ou=({maxRetries:t=2,initialDelayInMs:e=2e3,backoffFactor:n=2}={})=>async r=>Qa(r,{maxRetries:t,delayInMs:e,backoffFactor:n});async function Qa(t,{maxRetries:e,delayInMs:n,backoffFactor:r},s=[]){try{return await t()}catch(a){if(Sn(a)||e===0)throw a;const i=Oo(a),o=[...s,a],l=o.length;if(l>e)throw new fs({message:`Failed after ${l} attempts. Last error: ${i}`,reason:"maxRetriesExceeded",errors:o});if(a instanceof Error&&Se.isInstance(a)&&a.isRetryable===!0&&l<=e)return await Ru(n),Qa(t,{maxRetries:e,delayInMs:r*n,backoffFactor:r},o);throw l===1?a:new fs({message:`Failed after ${l} attempts with non-retryable error: '${i}'`,reason:"errorNotRetryable",errors:o})}}function Pu({maxRetries:t}){if(t!=null){if(!Number.isInteger(t))throw new me({parameter:"maxRetries",value:t,message:"maxRetries must be an integer"});if(t<0)throw new me({parameter:"maxRetries",value:t,message:"maxRetries must be >= 0"})}const e=t??2;return{maxRetries:e,retry:Ou({maxRetries:e})}}function hr({operationId:t,telemetry:e}){return{"operation.name":`${t}${(e==null?void 0:e.functionId)!=null?` ${e.functionId}`:""}`,"resource.name":e==null?void 0:e.functionId,"ai.operationId":t,"ai.telemetry.functionId":e==null?void 0:e.functionId}}function ju({model:t,settings:e,telemetry:n,headers:r}){var s;return{"ai.model.provider":t.provider,"ai.model.id":t.modelId,...Object.entries(e).reduce((a,[i,o])=>(a[`ai.settings.${i}`]=o,a),{}),...Object.entries((s=n==null?void 0:n.metadata)!=null?s:{}).reduce((a,[i,o])=>(a[`ai.telemetry.metadata.${i}`]=o,a),{}),...Object.entries(r??{}).reduce((a,[i,o])=>(o!==void 0&&(a[`ai.request.headers.${i}`]=o),a),{})}}var $u={startSpan(){return wn},startActiveSpan(t,e,n,r){if(typeof e=="function")return e(wn);if(typeof n=="function")return n(wn);if(typeof r=="function")return r(wn)}},wn={spanContext(){return Du},setAttribute(){return this},setAttributes(){return this},addEvent(){return this},addLink(){return this},addLinks(){return this},setStatus(){return this},updateName(){return this},end(){return this},isRecording(){return!1},recordException(){return this}},Du={traceId:"",spanId:"",traceFlags:0};function Lu({isEnabled:t=!1,tracer:e}={}){return t?e||Iu.getTracer("ai"):$u}function mr({name:t,tracer:e,attributes:n,fn:r,endWhenDone:s=!0}){return e.startActiveSpan(t,{attributes:n},async a=>{try{const i=await r(a);return s&&a.end(),i}catch(i){try{i instanceof Error?(a.recordException({name:i.name,message:i.message,stack:i.stack}),a.setStatus({code:$n.ERROR,message:i.message})):a.setStatus({code:$n.ERROR})}finally{a.end()}throw i}})}function dt({telemetry:t,attributes:e}){return(t==null?void 0:t.isEnabled)!==!0?{}:Object.entries(e).reduce((n,[r,s])=>{if(s===void 0)return n;if(typeof s=="object"&&"input"in s&&typeof s.input=="function"){if((t==null?void 0:t.recordInputs)===!1)return n;const a=s.input();return a===void 0?n:{...n,[r]:a}}if(typeof s=="object"&&"output"in s&&typeof s.output=="function"){if((t==null?void 0:t.recordOutputs)===!1)return n;const a=s.output();return a===void 0?n:{...n,[r]:a}}return{...n,[r]:s}},{})}var ei="AI_NoObjectGeneratedError",ti=`vercel.ai.error.${ei}`,Zu=Symbol.for(ti),ni,hs=class extends O{constructor({message:t="No object generated.",cause:e,text:n,response:r,usage:s}){super({name:ei,message:t,cause:e}),this[ni]=!0,this.text=n,this.response=r,this.usage=s}static isInstance(t){return O.hasMarker(t,ti)}};ni=Zu;var ri="AI_DownloadError",si=`vercel.ai.error.${ri}`,Fu=Symbol.for(si),ai,sr=class extends O{constructor({url:t,statusCode:e,statusText:n,cause:r,message:s=r==null?`Failed to download ${t}: ${e} ${n}`:`Failed to download ${t}: ${r}`}){super({name:ri,message:s,cause:r}),this[ai]=!0,this.url=t,this.statusCode=e,this.statusText=n}static isInstance(t){return O.hasMarker(t,si)}};ai=Fu;async function Uu({url:t,fetchImplementation:e=fetch}){var n;const r=t.toString();try{const s=await e(r);if(!s.ok)throw new sr({url:r,statusCode:s.status,statusText:s.statusText});return{data:new Uint8Array(await s.arrayBuffer()),mimeType:(n=s.headers.get("content-type"))!=null?n:void 0}}catch(s){throw sr.isInstance(s)?s:new sr({url:r,cause:s})}}var Vu=[{mimeType:"image/gif",bytes:[71,73,70]},{mimeType:"image/png",bytes:[137,80,78,71]},{mimeType:"image/jpeg",bytes:[255,216]},{mimeType:"image/webp",bytes:[82,73,70,70]}];function Bu(t){for(const{bytes:e,mimeType:n}of Vu)if(t.length>=e.length&&e.every((r,s)=>t[s]===r))return n}var ii="AI_InvalidDataContentError",oi=`vercel.ai.error.${ii}`,zu=Symbol.for(oi),li,ms=class extends O{constructor({content:t,cause:e,message:n=`Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof t}.`}){super({name:ii,message:n,cause:e}),this[li]=!0,this.content=t}static isInstance(t){return O.hasMarker(t,oi)}};li=zu;var ci=f.union([f.string(),f.instanceof(Uint8Array),f.instanceof(ArrayBuffer),f.custom(t=>{var e,n;return(n=(e=globalThis.Buffer)==null?void 0:e.isBuffer(t))!=null?n:!1},{message:"Must be a Buffer"})]);function qu(t){return typeof t=="string"?t:t instanceof ArrayBuffer?or(new Uint8Array(t)):or(t)}function Dn(t){if(t instanceof Uint8Array)return t;if(typeof t=="string")try{return Go(t)}catch(e){throw new ms({message:"Invalid data content. Content string is not a base64-encoded media.",content:t,cause:e})}if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new ms({content:t})}function Gu(t){try{return new TextDecoder().decode(t)}catch{throw new Error("Error decoding Uint8Array to text")}}var ui="AI_InvalidMessageRoleError",di=`vercel.ai.error.${ui}`,Ju=Symbol.for(di),pi,Hu=class extends O{constructor({role:t,message:e=`Invalid message role: '${t}'. Must be one of: "system", "user", "assistant", "tool".`}){super({name:ui,message:e}),this[pi]=!0,this.role=t}static isInstance(t){return O.hasMarker(t,di)}};pi=Ju;function Wu(t){try{const[e,n]=t.split(",");return{mimeType:e.split(";")[0].split(":")[1],base64Content:n}}catch{return{mimeType:void 0,base64Content:void 0}}}async function Yu({prompt:t,modelSupportsImageUrls:e=!0,modelSupportsUrl:n=()=>!1,downloadImplementation:r=Uu}){const s=await Xu(t.messages,r,e,n);return[...t.system!=null?[{role:"system",content:t.system}]:[],...t.messages.map(a=>Ku(a,s))]}function Ku(t,e){const n=t.role;switch(n){case"system":return{role:"system",content:t.content,providerMetadata:t.experimental_providerMetadata};case"user":return typeof t.content=="string"?{role:"user",content:[{type:"text",text:t.content}],providerMetadata:t.experimental_providerMetadata}:{role:"user",content:t.content.map(r=>Qu(r,e)).filter(r=>r.type!=="text"||r.text!==""),providerMetadata:t.experimental_providerMetadata};case"assistant":return typeof t.content=="string"?{role:"assistant",content:[{type:"text",text:t.content}],providerMetadata:t.experimental_providerMetadata}:{role:"assistant",content:t.content.filter(r=>r.type!=="text"||r.text!=="").map(r=>{const{experimental_providerMetadata:s,...a}=r;return{...a,providerMetadata:s}}),providerMetadata:t.experimental_providerMetadata};case"tool":return{role:"tool",content:t.content.map(r=>({type:"tool-result",toolCallId:r.toolCallId,toolName:r.toolName,result:r.result,content:r.experimental_content,isError:r.isError,providerMetadata:r.experimental_providerMetadata})),providerMetadata:t.experimental_providerMetadata};default:{const r=n;throw new Hu({role:r})}}}async function Xu(t,e,n,r){const s=t.filter(i=>i.role==="user").map(i=>i.content).filter(i=>Array.isArray(i)).flat().filter(i=>i.type==="image"||i.type==="file").filter(i=>!(i.type==="image"&&n===!0)).map(i=>i.type==="image"?i.image:i.data).map(i=>typeof i=="string"&&(i.startsWith("http:")||i.startsWith("https:"))?new URL(i):i).filter(i=>i instanceof URL).filter(i=>!r(i)),a=await Promise.all(s.map(async i=>({url:i,data:await e({url:i})})));return Object.fromEntries(a.map(({url:i,data:o})=>[i.toString(),o]))}function Qu(t,e){var n;if(t.type==="text")return{type:"text",text:t.text,providerMetadata:t.experimental_providerMetadata};let r=t.mimeType,s,a,i;const o=t.type;switch(o){case"image":s=t.image;break;case"file":s=t.data;break;default:throw new Error(`Unsupported part type: ${o}`)}try{a=typeof s=="string"?new URL(s):s}catch{a=s}if(a instanceof URL)if(a.protocol==="data:"){const{mimeType:l,base64Content:c}=Wu(a.toString());if(l==null||c==null)throw new Error(`Invalid data URL format in part ${o}`);r=l,i=Dn(c)}else{const l=e[a.toString()];l?(i=l.data,r??(r=l.mimeType)):i=a}else i=Dn(a);switch(o){case"image":return i instanceof Uint8Array&&(r=(n=Bu(i))!=null?n:r),{type:"image",image:i,mimeType:r,providerMetadata:t.experimental_providerMetadata};case"file":{if(r==null)throw new Error("Mime type is missing for file part");return{type:"file",data:i instanceof Uint8Array?qu(i):i,mimeType:r,providerMetadata:t.experimental_providerMetadata}}}}function ed({maxTokens:t,temperature:e,topP:n,topK:r,presencePenalty:s,frequencyPenalty:a,stopSequences:i,seed:o}){if(t!=null){if(!Number.isInteger(t))throw new me({parameter:"maxTokens",value:t,message:"maxTokens must be an integer"});if(t<1)throw new me({parameter:"maxTokens",value:t,message:"maxTokens must be >= 1"})}if(e!=null&&typeof e!="number")throw new me({parameter:"temperature",value:e,message:"temperature must be a number"});if(n!=null&&typeof n!="number")throw new me({parameter:"topP",value:n,message:"topP must be a number"});if(r!=null&&typeof r!="number")throw new me({parameter:"topK",value:r,message:"topK must be a number"});if(s!=null&&typeof s!="number")throw new me({parameter:"presencePenalty",value:s,message:"presencePenalty must be a number"});if(a!=null&&typeof a!="number")throw new me({parameter:"frequencyPenalty",value:a,message:"frequencyPenalty must be a number"});if(o!=null&&!Number.isInteger(o))throw new me({parameter:"seed",value:o,message:"seed must be an integer"});return{maxTokens:t,temperature:e??0,topP:n,topK:r,presencePenalty:s,frequencyPenalty:a,stopSequences:i!=null&&i.length>0?i:void 0,seed:o}}var gr=f.lazy(()=>f.union([f.null(),f.string(),f.number(),f.boolean(),f.record(f.string(),gr),f.array(gr)])),Be=f.record(f.string(),f.record(f.string(),gr)),td=f.array(f.union([f.object({type:f.literal("text"),text:f.string()}),f.object({type:f.literal("image"),data:f.string(),mimeType:f.string().optional()})])),fi=f.object({type:f.literal("text"),text:f.string(),experimental_providerMetadata:Be.optional()}),nd=f.object({type:f.literal("image"),image:f.union([ci,f.instanceof(URL)]),mimeType:f.string().optional(),experimental_providerMetadata:Be.optional()}),rd=f.object({type:f.literal("file"),data:f.union([ci,f.instanceof(URL)]),mimeType:f.string(),experimental_providerMetadata:Be.optional()}),sd=f.object({type:f.literal("tool-call"),toolCallId:f.string(),toolName:f.string(),args:f.unknown()}),ad=f.object({type:f.literal("tool-result"),toolCallId:f.string(),toolName:f.string(),result:f.unknown(),content:td.optional(),isError:f.boolean().optional(),experimental_providerMetadata:Be.optional()}),id=f.object({role:f.literal("system"),content:f.string(),experimental_providerMetadata:Be.optional()}),od=f.object({role:f.literal("user"),content:f.union([f.string(),f.array(f.union([fi,nd,rd]))]),experimental_providerMetadata:Be.optional()}),ld=f.object({role:f.literal("assistant"),content:f.union([f.string(),f.array(f.union([fi,sd]))]),experimental_providerMetadata:Be.optional()}),cd=f.object({role:f.literal("tool"),content:f.array(ad),experimental_providerMetadata:Be.optional()}),ud=f.union([id,od,ld,cd]);function dd(t){if(!Array.isArray(t))return"other";if(t.length===0)return"messages";const e=t.map(pd);return e.some(n=>n==="has-ui-specific-parts")?"ui-messages":e.every(n=>n==="has-core-specific-parts"||n==="message")?"messages":"other"}function pd(t){return typeof t=="object"&&t!==null&&(t.role==="function"||t.role==="data"||"toolInvocations"in t||"experimental_attachments"in t)?"has-ui-specific-parts":typeof t=="object"&&t!==null&&"content"in t&&(Array.isArray(t.content)||"experimental_providerMetadata"in t)?"has-core-specific-parts":typeof t=="object"&&t!==null&&"role"in t&&"content"in t&&typeof t.content=="string"&&["system","user","assistant","tool"].includes(t.role)?"message":"other"}function fd(t){var e,n,r;const s=[];for(const a of t){let i;try{i=new URL(a.url)}catch{throw new Error(`Invalid URL: ${a.url}`)}switch(i.protocol){case"http:":case"https:":{if((e=a.contentType)!=null&&e.startsWith("image/"))s.push({type:"image",image:i});else{if(!a.contentType)throw new Error("If the attachment is not an image, it must specify a content type");s.push({type:"file",data:i,mimeType:a.contentType})}break}case"data:":{let o,l,c;try{[o,l]=a.url.split(","),c=o.split(";")[0].split(":")[1]}catch{throw new Error(`Error processing data URL: ${a.url}`)}if(c==null||l==null)throw new Error(`Invalid data URL format: ${a.url}`);if((n=a.contentType)!=null&&n.startsWith("image/"))s.push({type:"image",image:Dn(l)});else if((r=a.contentType)!=null&&r.startsWith("text/"))s.push({type:"text",text:Gu(Dn(l))});else{if(!a.contentType)throw new Error("If the attachment is not an image or text, it must specify a content type");s.push({type:"file",data:l,mimeType:a.contentType})}break}default:throw new Error(`Unsupported URL protocol: ${i.protocol}`)}}return s}var hi="AI_MessageConversionError",mi=`vercel.ai.error.${hi}`,hd=Symbol.for(mi),gi,gs=class extends O{constructor({originalMessage:t,message:e}){super({name:hi,message:e}),this[gi]=!0,this.originalMessage=t}static isInstance(t){return O.hasMarker(t,mi)}};gi=hd;function md(t,e){var n;const r=(n=e==null?void 0:e.tools)!=null?n:{},s=[];for(const a of t){const{role:i,content:o,toolInvocations:l,experimental_attachments:c}=a;switch(i){case"system":{s.push({role:"system",content:o});break}case"user":{s.push({role:"user",content:c?[{type:"text",text:o},...fd(c)]:o});break}case"assistant":{if(l==null){s.push({role:"assistant",content:o});break}s.push({role:"assistant",content:[{type:"text",text:o},...l.map(({toolCallId:u,toolName:d,args:p})=>({type:"tool-call",toolCallId:u,toolName:d,args:p}))]}),s.push({role:"tool",content:l.map(u=>{if(!("result"in u))throw new gs({originalMessage:a,message:"ToolInvocation must have a result: "+JSON.stringify(u)});const{toolCallId:d,toolName:p,result:h}=u,g=r[p];return(g==null?void 0:g.experimental_toToolResultContent)!=null?{type:"tool-result",toolCallId:d,toolName:p,result:g.experimental_toToolResultContent(h),experimental_content:g.experimental_toToolResultContent(h)}:{type:"tool-result",toolCallId:d,toolName:p,result:h}})});break}case"data":break;default:{const u=i;throw new gs({originalMessage:a,message:`Unsupported role: ${u}`})}}}return s}function gd({prompt:t,tools:e}){if(t.prompt==null&&t.messages==null)throw new He({prompt:t,message:"prompt or messages must be defined"});if(t.prompt!=null&&t.messages!=null)throw new He({prompt:t,message:"prompt and messages cannot be defined at the same time"});if(t.system!=null&&typeof t.system!="string")throw new He({prompt:t,message:"system must be a string"});if(t.prompt!=null){if(typeof t.prompt!="string")throw new He({prompt:t,message:"prompt must be a string"});return{type:"prompt",system:t.system,messages:[{role:"user",content:t.prompt}]}}if(t.messages!=null){const n=dd(t.messages);if(n==="other")throw new He({prompt:t,message:"messages must be an array of CoreMessage or UIMessage"});const r=n==="ui-messages"?md(t.messages,{tools:e}):t.messages,s=mn({value:r,schema:f.array(ud)});if(!s.success)throw new He({prompt:t,message:"messages must be an array of CoreMessage or UIMessage",cause:s.error});return{type:"messages",messages:r,system:t.system}}throw new Error("unreachable")}function yd({promptTokens:t,completionTokens:e}){return{promptTokens:t,completionTokens:e,totalTokens:t+e}}function vd(t,e){return{promptTokens:t.promptTokens+e.promptTokens,completionTokens:t.completionTokens+e.completionTokens,totalTokens:t.totalTokens+e.totalTokens}}var _d="JSON schema:",bd="You MUST answer with a JSON object that matches the JSON schema above.",wd="You MUST answer with JSON.";function Sd({prompt:t,schema:e,schemaPrefix:n=e!=null?_d:void 0,schemaSuffix:r=e!=null?bd:wd}){return[t!=null&&t.length>0?t:void 0,t!=null&&t.length>0?"":void 0,n,e!=null?JSON.stringify(e):void 0,r].filter(s=>s!=null).join(`
`)}hn({prefix:"aiobj",size:24});hn({prefix:"aiobj",size:24});var yi="AI_NoOutputSpecifiedError",vi=`vercel.ai.error.${yi}`,xd=Symbol.for(vi),_i,kd=class extends O{constructor({message:t="No output specified."}={}){super({name:yi,message:t}),this[_i]=!0}static isInstance(t){return O.hasMarker(t,vi)}};_i=xd;var bi="AI_ToolExecutionError",wi=`vercel.ai.error.${bi}`,Td=Symbol.for(wi),Si,Ed=class extends O{constructor({toolArgs:t,toolName:e,toolCallId:n,cause:r,message:s=`Error executing tool ${e}: ${fn(r)}`}){super({name:bi,message:s,cause:r}),this[Si]=!0,this.toolArgs=t,this.toolName=e,this.toolCallId=n}static isInstance(t){return O.hasMarker(t,wi)}};Si=Td;function Cd(t){return t!=null&&Object.keys(t).length>0}function Id({tools:t,toolChoice:e,activeTools:n}){return Cd(t)?{tools:(n!=null?Object.entries(t).filter(([s])=>n.includes(s)):Object.entries(t)).map(([s,a])=>{const i=a.type;switch(i){case void 0:case"function":return{type:"function",name:s,description:a.description,parameters:Gn(a.parameters).jsonSchema};case"provider-defined":return{type:"provider-defined",name:s,id:a.id,args:a.args};default:{const o=i;throw new Error(`Unsupported tool type: ${o}`)}}}),toolChoice:e==null?{type:"auto"}:typeof e=="string"?{type:e}:{type:"tool",toolName:e.toolName}}:{tools:void 0,toolChoice:void 0}}var Ad=/^([\s\S]*?)(\s+)(\S*)$/;function Nd(t){const e=t.match(Ad);return e?{prefix:e[1],whitespace:e[2],suffix:e[3]}:void 0}function Rd(t){const e=Nd(t);return e?e.prefix+e.whitespace:t}var xi="AI_InvalidToolArgumentsError",ki=`vercel.ai.error.${xi}`,Md=Symbol.for(ki),Ti,Ei=class extends O{constructor({toolArgs:t,toolName:e,cause:n,message:r=`Invalid arguments for tool ${e}: ${fn(n)}`}){super({name:xi,message:r,cause:n}),this[Ti]=!0,this.toolArgs=t,this.toolName=e}static isInstance(t){return O.hasMarker(t,ki)}};Ti=Md;var Ci="AI_NoSuchToolError",Ii=`vercel.ai.error.${Ci}`,Od=Symbol.for(Ii),Ai,yr=class extends O{constructor({toolName:t,availableTools:e=void 0,message:n=`Model tried to call unavailable tool '${t}'. ${e===void 0?"No tools are available.":`Available tools: ${e.join(", ")}.`}`}){super({name:Ci,message:n}),this[Ai]=!0,this.toolName=t,this.availableTools=e}static isInstance(t){return O.hasMarker(t,Ii)}};Ai=Od;var Ni="AI_ToolCallRepairError",Ri=`vercel.ai.error.${Ni}`,Pd=Symbol.for(Ri),Mi,jd=class extends O{constructor({cause:t,originalError:e,message:n=`Error repairing tool call: ${fn(t)}`}){super({name:Ni,message:n,cause:t}),this[Mi]=!0,this.originalError=e}static isInstance(t){return O.hasMarker(t,Ri)}};Mi=Pd;async function $d({toolCall:t,tools:e,repairToolCall:n,system:r,messages:s}){if(e==null)throw new yr({toolName:t.toolName});try{return await ys({toolCall:t,tools:e})}catch(a){if(n==null||!(yr.isInstance(a)||Ei.isInstance(a)))throw a;let i=null;try{i=await n({toolCall:t,tools:e,parameterSchema:({toolName:o})=>Gn(e[o].parameters).jsonSchema,system:r,messages:s,error:a})}catch(o){throw new jd({cause:o,originalError:a})}if(i==null)throw a;return await ys({toolCall:i,tools:e})}}async function ys({toolCall:t,tools:e}){const n=t.toolName,r=e[n];if(r==null)throw new yr({toolName:t.toolName,availableTools:Object.keys(e)});const s=Gn(r.parameters),a=t.args.trim()===""?mn({value:{},schema:s}):gt({text:t.args,schema:s});if(a.success===!1)throw new Ei({toolName:n,toolArgs:t.args,cause:a.error});return{type:"tool-call",toolCallId:t.toolCallId,toolName:n,args:a.value}}function Dd({text:t="",tools:e,toolCalls:n,toolResults:r}){const s=[];return s.push({role:"assistant",content:[{type:"text",text:t},...n]}),r.length>0&&s.push({role:"tool",content:r.map(a=>{const i=e[a.toolName];return(i==null?void 0:i.experimental_toToolResultContent)!=null?{type:"tool-result",toolCallId:a.toolCallId,toolName:a.toolName,result:i.experimental_toToolResultContent(a.result),experimental_content:i.experimental_toToolResultContent(a.result)}:{type:"tool-result",toolCallId:a.toolCallId,toolName:a.toolName,result:a.result}})}),s}var Ld=hn({prefix:"aitxt",size:24});async function Pr({model:t,tools:e,toolChoice:n,system:r,prompt:s,messages:a,maxRetries:i,abortSignal:o,headers:l,maxSteps:c=1,experimental_output:u,experimental_continueSteps:d=!1,experimental_telemetry:p,experimental_providerMetadata:h,experimental_activeTools:g,experimental_repairToolCall:_,_internal:{generateId:S=Ld,currentDate:E=()=>new Date}={},onStepFinish:$,...L}){var Y;if(c<1)throw new me({parameter:"maxSteps",value:c,message:"maxSteps must be at least 1"});const{maxRetries:Q,retry:re}=Pu({maxRetries:i}),R=ju({model:t,telemetry:p,headers:l,settings:{...L,maxRetries:Q}}),F=gd({prompt:{system:(Y=u==null?void 0:u.injectIntoSystemPrompt({system:r,model:t}))!=null?Y:r,prompt:s,messages:a},tools:e}),T=Lu(p);return mr({name:"ai.generateText",attributes:dt({telemetry:p,attributes:{...hr({operationId:"ai.generateText",telemetry:p}),...R,"ai.prompt":{input:()=>JSON.stringify({system:r,prompt:s,messages:a})},"ai.settings.maxSteps":c}}),tracer:T,fn:async D=>{var q,V,N,ee,I,W;const te={type:"regular",...Id({tools:e,toolChoice:n,activeTools:g})},ce=ed(L);let J,je=[],St=[],zr=0;const nt=[];let Je="";const qr=[];let yn={completionTokens:0,promptTokens:0,totalTokens:0},rt="initial";do{const Jn=zr===0?F.type:"messages",Hn=[...F.messages,...nt],Gr=await Yu({prompt:{type:Jn,system:F.system,messages:Hn},modelSupportsImageUrls:t.supportsImageUrls,modelSupportsUrl:t.supportsUrl});J=await re(()=>mr({name:"ai.generateText.doGenerate",attributes:dt({telemetry:p,attributes:{...hr({operationId:"ai.generateText.doGenerate",telemetry:p}),...R,"ai.prompt.format":{input:()=>Jn},"ai.prompt.messages":{input:()=>JSON.stringify(Gr)},"ai.prompt.tools":{input:()=>{var be;return(be=te.tools)==null?void 0:be.map(vn=>JSON.stringify(vn))}},"ai.prompt.toolChoice":{input:()=>te.toolChoice!=null?JSON.stringify(te.toolChoice):void 0},"gen_ai.system":t.provider,"gen_ai.request.model":t.modelId,"gen_ai.request.frequency_penalty":L.frequencyPenalty,"gen_ai.request.max_tokens":L.maxTokens,"gen_ai.request.presence_penalty":L.presencePenalty,"gen_ai.request.stop_sequences":L.stopSequences,"gen_ai.request.temperature":L.temperature,"gen_ai.request.top_k":L.topK,"gen_ai.request.top_p":L.topP}}),tracer:T,fn:async be=>{var vn,Kr,Xr,Qr,es,ts;const pe=await t.doGenerate({mode:te,...ce,inputFormat:Jn,responseFormat:u==null?void 0:u.responseFormat({model:t}),prompt:Gr,providerMetadata:h,abortSignal:o,headers:l}),at={id:(Kr=(vn=pe.response)==null?void 0:vn.id)!=null?Kr:S(),timestamp:(Qr=(Xr=pe.response)==null?void 0:Xr.timestamp)!=null?Qr:E(),modelId:(ts=(es=pe.response)==null?void 0:es.modelId)!=null?ts:t.modelId};return be.setAttributes(dt({telemetry:p,attributes:{"ai.response.finishReason":pe.finishReason,"ai.response.text":{output:()=>pe.text},"ai.response.toolCalls":{output:()=>JSON.stringify(pe.toolCalls)},"ai.response.id":at.id,"ai.response.model":at.modelId,"ai.response.timestamp":at.timestamp.toISOString(),"ai.usage.promptTokens":pe.usage.promptTokens,"ai.usage.completionTokens":pe.usage.completionTokens,"gen_ai.response.finish_reasons":[pe.finishReason],"gen_ai.response.id":at.id,"gen_ai.response.model":at.modelId,"gen_ai.usage.input_tokens":pe.usage.promptTokens,"gen_ai.usage.output_tokens":pe.usage.completionTokens}})),{...pe,response:at}}})),je=await Promise.all(((q=J.toolCalls)!=null?q:[]).map(be=>$d({toolCall:be,tools:e,repairToolCall:_,system:r,messages:Hn}))),St=e==null?[]:await Zd({toolCalls:je,tools:e,tracer:T,telemetry:p,messages:Hn,abortSignal:o});const Jr=yd(J.usage);yn=vd(yn,Jr);let st="done";++zr<c&&(d&&J.finishReason==="length"&&je.length===0?st="continue":je.length>0&&St.length===je.length&&(st="tool-result"));const Hr=(V=J.text)!=null?V:"",Wr=rt==="continue"&&Je.trimEnd()!==Je?Hr.trimStart():Hr,xt=st==="continue"?Rd(Wr):Wr;if(Je=st==="continue"||rt==="continue"?Je+xt:xt,rt==="continue"){const be=nt[nt.length-1];typeof be.content=="string"?be.content+=xt:be.content.push({text:xt,type:"text"})}else nt.push(...Dd({text:Je,tools:e??{},toolCalls:je,toolResults:St}));const Yr={stepType:rt,text:xt,toolCalls:je,toolResults:St,finishReason:J.finishReason,usage:Jr,warnings:J.warnings,logprobs:J.logprobs,request:(N=J.request)!=null?N:{},response:{...J.response,headers:(ee=J.rawResponse)==null?void 0:ee.headers,messages:JSON.parse(JSON.stringify(nt))},experimental_providerMetadata:J.providerMetadata,isContinued:st==="continue"};qr.push(Yr),await($==null?void 0:$(Yr)),rt=st}while(rt!=="done");return D.setAttributes(dt({telemetry:p,attributes:{"ai.response.finishReason":J.finishReason,"ai.response.text":{output:()=>J.text},"ai.response.toolCalls":{output:()=>JSON.stringify(J.toolCalls)},"ai.usage.promptTokens":J.usage.promptTokens,"ai.usage.completionTokens":J.usage.completionTokens}})),new Fd({text:Je,outputResolver:()=>{if(u==null)throw new kd;return u.parseOutput({text:Je},{response:J.response,usage:yn})},toolCalls:je,toolResults:St,finishReason:J.finishReason,usage:yn,warnings:J.warnings,request:(I=J.request)!=null?I:{},response:{...J.response,headers:(W=J.rawResponse)==null?void 0:W.headers,messages:nt},logprobs:J.logprobs,steps:qr,providerMetadata:J.providerMetadata})}})}async function Zd({toolCalls:t,tools:e,tracer:n,telemetry:r,messages:s,abortSignal:a}){return(await Promise.all(t.map(async({toolCallId:o,toolName:l,args:c})=>{const u=e[l];if((u==null?void 0:u.execute)==null)return;const d=await mr({name:"ai.toolCall",attributes:dt({telemetry:r,attributes:{...hr({operationId:"ai.toolCall",telemetry:r}),"ai.toolCall.name":l,"ai.toolCall.id":o,"ai.toolCall.args":{output:()=>JSON.stringify(c)}}}),tracer:n,fn:async p=>{try{const h=await u.execute(c,{toolCallId:o,messages:s,abortSignal:a});try{p.setAttributes(dt({telemetry:r,attributes:{"ai.toolCall.result":{output:()=>JSON.stringify(h)}}}))}catch{}return h}catch(h){throw new Ed({toolCallId:o,toolName:l,toolArgs:c,cause:h})}}});return{type:"tool-result",toolCallId:o,toolName:l,args:c,result:d}}))).filter(o=>o!=null)}var Fd=class{constructor(t){this.text=t.text,this.toolCalls=t.toolCalls,this.toolResults=t.toolResults,this.finishReason=t.finishReason,this.usage=t.usage,this.warnings=t.warnings,this.request=t.request,this.response=t.response,this.steps=t.steps,this.experimental_providerMetadata=t.providerMetadata,this.logprobs=t.logprobs,this.outputResolver=t.outputResolver}get experimental_output(){return this.outputResolver()}},Ud={};Or(Ud,{object:()=>Bd,text:()=>Vd});var Vd=()=>({type:"text",responseFormat:()=>({type:"text"}),injectIntoSystemPrompt({system:t}){return t},parsePartial({text:t}){return{partial:t}},parseOutput({text:t}){return t}}),Bd=({schema:t})=>{const e=Gn(t);return{type:"object",responseFormat:({model:n})=>({type:"json",schema:n.supportsStructuredOutputs?e.jsonSchema:void 0}),injectIntoSystemPrompt({system:n,model:r}){return r.supportsStructuredOutputs?n:Sd({prompt:n,schema:e.jsonSchema})},parsePartial({text:n}){const r=Bc(n);switch(r.state){case"failed-parse":case"undefined-input":return;case"repaired-parse":case"successful-parse":return{partial:r.value};default:{const s=r.state;throw new Error(`Unsupported parse state: ${s}`)}}},parseOutput({text:n},r){const s=gt({text:n});if(!s.success)throw new hs({message:"No object generated: could not parse the response.",cause:s.error,text:n,response:r.response,usage:r.usage});const a=mn({value:s.value,schema:e});if(!a.success)throw new hs({message:"No object generated: response did not match schema.",cause:a.error,text:n,response:r.response,usage:r.usage});return a.value}}};function Oi(t,e){const n=t.getReader(),r=e.getReader();let s,a,i=!1,o=!1;async function l(u){try{s==null&&(s=n.read());const d=await s;s=void 0,d.done?u.close():u.enqueue(d.value)}catch(d){u.error(d)}}async function c(u){try{a==null&&(a=r.read());const d=await a;a=void 0,d.done?u.close():u.enqueue(d.value)}catch(d){u.error(d)}}return new ReadableStream({async pull(u){try{if(i){await c(u);return}if(o){await l(u);return}s==null&&(s=n.read()),a==null&&(a=r.read());const{result:d,reader:p}=await Promise.race([s.then(h=>({result:h,reader:n})),a.then(h=>({result:h,reader:r}))]);d.done||u.enqueue(d.value),p===n?(s=void 0,d.done&&(await c(u),i=!0)):(a=void 0,d.done&&(o=!0,await l(u)))}catch(d){u.error(d)}},cancel(){n.cancel(),r.cancel()}})}hn({prefix:"aitxt",size:24});var zd={};Or(zd,{mergeIntoDataStream:()=>Jd,toDataStream:()=>qd,toDataStreamResponse:()=>Gd});function Pi(t={}){const e=new TextEncoder;let n="";return new TransformStream({async start(){t.onStart&&await t.onStart()},async transform(r,s){s.enqueue(e.encode(r)),n+=r,t.onToken&&await t.onToken(r),t.onText&&typeof r=="string"&&await t.onText(r)},async flush(){t.onCompletion&&await t.onCompletion(n),t.onFinal&&await t.onFinal(n)}})}function jr(t,e){return t.pipeThrough(new TransformStream({transform:async(n,r)=>{var s;if(typeof n=="string"){r.enqueue(n);return}if("event"in n){n.event==="on_chat_model_stream"&&vs((s=n.data)==null?void 0:s.chunk,r);return}vs(n,r)}})).pipeThrough(Pi(e)).pipeThrough(new TextDecoderStream).pipeThrough(new TransformStream({transform:async(n,r)=>{r.enqueue(Za("text",n))}}))}function qd(t,e){return jr(t,e).pipeThrough(new TextEncoderStream)}function Gd(t,e){var n;const r=jr(t,e==null?void 0:e.callbacks).pipeThrough(new TextEncoderStream),s=e==null?void 0:e.data,a=e==null?void 0:e.init,i=s?Oi(s.stream,r):r;return new Response(i,{status:(n=a==null?void 0:a.status)!=null?n:200,statusText:a==null?void 0:a.statusText,headers:Ga(a==null?void 0:a.headers,{contentType:"text/plain; charset=utf-8",dataStreamVersion:"v1"})})}function Jd(t,e){e.dataStream.merge(jr(t,e.callbacks))}function vs(t,e){if(typeof t.content=="string")e.enqueue(t.content);else{const n=t.content;for(const r of n)r.type==="text"&&e.enqueue(r.text)}}var Hd={};Or(Hd,{mergeIntoDataStream:()=>Kd,toDataStream:()=>Wd,toDataStreamResponse:()=>Yd});function $r(t,e){const n=Xd();return Mo(t[Symbol.asyncIterator]()).pipeThrough(new TransformStream({async transform(r,s){s.enqueue(n(r.delta))}})).pipeThrough(Pi(e)).pipeThrough(new TextDecoderStream).pipeThrough(new TransformStream({transform:async(r,s)=>{s.enqueue(Za("text",r))}}))}function Wd(t,e){return $r(t,e).pipeThrough(new TextEncoderStream)}function Yd(t,e={}){var n;const{init:r,data:s,callbacks:a}=e,i=$r(t,a).pipeThrough(new TextEncoderStream),o=s?Oi(s.stream,i):i;return new Response(o,{status:(n=r==null?void 0:r.status)!=null?n:200,statusText:r==null?void 0:r.statusText,headers:Ga(r==null?void 0:r.headers,{contentType:"text/plain; charset=utf-8",dataStreamVersion:"v1"})})}function Kd(t,e){e.dataStream.merge($r(t,e.callbacks))}function Xd(){let t=!0;return e=>(t&&(e=e.trimStart(),e&&(t=!1)),e)}function _s(t){return t.length>0?t.replace(/^(.{3})(.*)(.{4})$/,"$1****$3"):""}var Zs,Fs;const pt=((Fs=(Zs=window.electron)==null?void 0:Zs.remote)==null?void 0:Fs.safeStorage)??{isEncryptionAvailable:()=>!1,encryptString:t=>Buffer.from(t),decryptString:t=>t.toString()};var Dr=(t=>(t.o1Preview="o1-preview",t.claude35Sonnet="claude-3.5-sonnet",t.claude35Haiku="claude-3.5-haiku",t.claude3Opus="claude-3-opus",t.llama3370bInstruct="llama-3.3-70b-instruct",t.llama323bInstruct="llama-3.2-3b-instruct",t.llama321bInstruct="llama-3.2-1b-instruct",t.hermes2ProMistral7b="hermes-2-pro-mistral-7b",t.llama3Groq70b="llama3-groq-70b",t.llama3370bVersatile="llama-3.3-70b-versatile",t.llama3370bSpecdec="llama-3.3-70b-specdec",t.llama31SonarSmall128kOnline="llama-3.1-sonar-small-128k-online",t.llama31SonarLarge128kOnline="llama-3.1-sonar-large-128k-online",t.llama31SonarHuge128kOnline="llama-3.1-sonar-huge-128k-online",t.mistralLarge="mistral-large",t.mistralSmall="mistral-small",t.mistralNemo="mistral-nemo",t.novaLite="nova-lite",t.novaMicro="nova-micro",t.novaPro="nova-pro",t.mythomaxL213b="mythomax-l2-13b",t))(Dr||{}),Lr=(t=>(t.bgeLargeEnV15="bge-large-en-v1.5",t))(Lr||{});const lt="obsidian-assistant",ji="Obsidian Assistant",Qd=Dr.llama3370bSpecdec;Lr.bgeLargeEnV15;const ep={assistantApiUrl:"",assistantApiKey:"",assistantApiKeySaved:!1,modelId:Qd,maxTokens:256,temperature:.6,topK:3,minSimilarityScore:.7,ignoredFolders:[],syncEnabled:!1,autoSyncInterval:30,customTemplatesFolder:"ai/templates",logLevel:"error"},tp={continue:{name:"continue",description:"Continue writing from the current text",prompt:`Continue this text naturally, maintaining the same style and tone. Only return the continuation, no explanations or other text:

{{text}}`},summarise:{name:"summarise",description:"Summarise the selected text",prompt:`Provide a concise summary of this text. Return only the summary, no explanations or other text:

{{text}}`},expand:{name:"expand",description:"Expand on the selected text",prompt:`Expand this text with more details and examples. Return only the expanded text, no explanations or other text:

{{text}}`},rewrite:{name:"rewrite",description:"Rewrite the selected text",prompt:`Rewrite this text to improve clarity and flow. Return only the rewritten text, no explanations or other text:

{{text}}`},simplify:{name:"simplify",description:"Simplify the selected text",prompt:`Simplify this text to make it easier to understand. Return only the simplified text, no explanations or other text:

{{text}}`},"suggest-tags":{name:"suggest-tags",description:"Suggest tags for the selected text",prompt:`Suggest tags for this text. Return only the tags, no explanations or other text:

{{text}}`},"generate-title":{name:"generate-title",description:"Generate a title from the content",prompt:`Generate a clear, concise title for this text. Return only the title, no quotes or extra text. (do not use * " \\ / < > : | ? .):

{{text}}`},"generate-text":{name:"Generate text",description:"Generate text with custom variables",prompt:`Write a {{style}} passage about {{topic}} that is {{length}} long.

Use this context:
{{text}}`,variables:["style","topic","length"]},brainstorm:{name:"brainstorm",description:"Brainstorm ideas for the selected text",prompt:`Brainstorm ideas for this text. Return only the ideas, no explanations or other text:

{{text}}`}},np={level:"debug",useTimestamp:!0,output:console,serviceName:ji};class rp{constructor(){this.config={...np},this.listeners=new Set}setConfig(e){this.config={...this.config,...e},this.notifyListeners()}getConfig(){return this.config}addListener(e){this.listeners.add(e)}removeListener(e){this.listeners.delete(e)}notifyListeners(){for(const e of this.listeners)e(this.config)}}const Ln=new rp,$i=t=>{Ln.setConfig(t)},sp=()=>Ln.getConfig();class ap extends M.PluginSettingTab{constructor(e,n){super(e,n),this.temporaryAssistantApiKey="",this.plugin=n,this.settings=n.settings}createAssistantSettings(e){new M.Setting(e).setName("Assistant API URL").setDesc("The URL of your assistant API").addText(n=>n.setPlaceholder("Enter your Assistant API URL").setValue(this.settings.assistantApiUrl).onChange(async r=>{this.settings.assistantApiUrl=r,await this.plugin.saveSettings()})),this.createApiKeySetting(e,"API key","The API key for your assistant","assistantApiKey","assistantApiKeySaved",this.temporaryAssistantApiKey,n=>{this.temporaryAssistantApiKey=n})}createApiKeySetting(e,n,r,s,a,i,o){this.plugin.settings[a]?new M.Setting(e).setName(n).setDesc(r).addText(c=>{try{const u=this.plugin.settings[s];if(pt.isEncryptionAvailable()&&u){const d=pt.decryptString(Buffer.from(u,"base64"));c.setPlaceholder(_s(d))}else c.setPlaceholder(_s(u))}catch{c.setPlaceholder("********")}c.setDisabled(!0)}).addButton(c=>{c.setButtonText("Remove API Key").onClick(async()=>{this.plugin.settings[s]="",this.plugin.settings[a]=!1,await this.plugin.saveSettings(),new M.Notice(`${n} removed`),this.display()})}):new M.Setting(e).setName(n).setDesc(r).addText(c=>c.setPlaceholder(`Enter your ${n}`).onChange(u=>o(u))).addButton(c=>{c.setButtonText("Save API Key").onClick(async()=>{if(i)try{if(pt.isEncryptionAvailable()){const u=pt.encryptString(i);this.plugin.settings[s]=Buffer.from(u).toString("base64")}else this.plugin.settings[s]=i;this.plugin.settings[a]=!0,o(""),await this.plugin.saveSettings(),new M.Notice(`${n} saved successfully`),this.display()}catch(u){new M.Notice("Failed to save API key"),console.error(u)}else new M.Notice("Please enter an API key")})})}createModelSettings(e){new M.Setting(e).setName("Text model").setHeading(),new M.Setting(e).setName("Model ID").setDesc("The ID of the text model to use").addDropdown(n=>n.addOptions(Object.fromEntries(Object.entries(Dr).map(([r,s])=>{var a;return[s,((a=s.split("/").pop())==null?void 0:a.replace(/-/g," ").toUpperCase())??s]}))).setValue(this.settings.modelId).onChange(async r=>{this.settings.modelId=r,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Max tokens","The maximum number of tokens to generate","maxTokens",1,Number.POSITIVE_INFINITY),this.createNumberSetting(e,"Temperature","The temperature of the text model","temperature",0,5,!0)}createRagSettings(e){new M.Setting(e).setName("RAG").setHeading(),new M.Setting(e).setName("Text embeddings model ID").setDesc("The ID of the text embeddings model to use").addDropdown(n=>n.addOptions(Object.fromEntries(Object.entries(Lr).map(([r,s])=>{var a;return[s,((a=s.split("/").pop())==null?void 0:a.replace(/-/g," ").toUpperCase())??s]}))).setValue(this.settings.textEmbeddingsModelId).onChange(async r=>{this.settings.textEmbeddingsModelId=r,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Top k","The number of results to return","topK",1,Number.POSITIVE_INFINITY),this.createNumberSetting(e,"Min similarity score","The minimum similarity score to return","minSimilarityScore",0,1,!0)}createSyncSettings(e){new M.Setting(e).setName("Sync").setHeading(),new M.Setting(e).setName("Ignored folders").setDesc("Folders to ignore when syncing notes, separated by commas").addText(n=>n.setPlaceholder("Enter the folders to ignore").setValue(this.settings.ignoredFolders.join(",")).onChange(async r=>{this.settings.ignoredFolders=r.split(",").filter(Boolean),await this.plugin.saveSettings()})),new M.Setting(e).setName("Enable auto sync").setDesc("Automatically sync notes at regular intervals").addToggle(n=>n.setValue(this.settings.syncEnabled).onChange(async r=>{this.settings.syncEnabled=r,await this.plugin.saveSettings()})),this.createNumberSetting(e,"Sync interval","How often to sync (in minutes)","autoSyncInterval",1,Number.POSITIVE_INFINITY)}createTextGeneratorSettings(e){new M.Setting(e).setName("Text Generator").setHeading(),new M.Setting(e).setName("Custom templates folder").setDesc("The folder to store custom templates").addText(n=>n.setPlaceholder("Enter the folder to store custom templates").setValue(this.settings.customTemplatesFolder).onChange(async r=>{this.settings.customTemplatesFolder=r,await this.plugin.saveSettings()}))}createLoggerSettings(e){new M.Setting(e).setName("Logging").setHeading(),new M.Setting(e).setName("Log Level").setDesc("Set the logging level for the plugin").addDropdown(n=>n.addOptions({error:"Error",warn:"Warning",info:"Info",debug:"Debug"}).setValue(this.settings.logLevel||"error").onChange(async r=>{this.settings.logLevel=r,$i({level:r}),await this.plugin.saveSettings()}))}createNumberSetting(e,n,r,s,a,i,o=!1){new M.Setting(e).setName(n).setDesc(r).addText(l=>{var c;return l.setPlaceholder(n).setValue(((c=this.plugin.settings[s])==null?void 0:c.toString())??"").onChange(async u=>{const d=o?Number.parseFloat(u):Number.parseInt(u);!Number.isNaN(d)&&d>=a&&d<=i?(this.plugin.settings[s]=d,await this.plugin.saveSettings()):new M.Notice(`Invalid value for ${n}. Must be between ${a} and ${i}`)})})}display(){const{containerEl:e}=this;e.empty(),this.createAssistantSettings(e),this.createModelSettings(e),this.createRagSettings(e),this.createSyncSettings(e),this.createTextGeneratorSettings(e),this.createLoggerSettings(e)}}class Di{constructor(e,n,r,s,a){this.app=e,this.assistant=n,this.logger=r,this.settings=s,this.sync=a,this.messages=[],this.apiMessages=[],this.component=null,this.svelteComponents=[],this.isProcessing=!1,this.DEFAULT_SYSTEM_MESSAGE={role:"system",content:`You are a helpful AI assistant that analyzes notes and provides insights. Consider the context carefully before answering questions. The current date is ${new Date().toISOString().split("T")[0]}.`},this.validateServices(),this.contentEl=document.createElement("div"),this.chatId=Math.random().toString(36).substring(2,15)}validateServices(){if(!this.assistant)throw new Error("Assistant not initialized")}async onSendMessage(e,n){try{if(!e.trim())return;this.isProcessing=!0;const r="";this.component&&this.component.$set({streamingContent:r}),this.updateComponent(),this.logger.debug("Sending message",{message:e,filters:n});const s={role:"user",content:e};this.messages.push(s);const a={role:"assistant",content:""};this.messages.push(a),this.updateComponent(),this.apiMessages.some(o=>o.role==="system")||this.apiMessages.push(this.DEFAULT_SYSTEM_MESSAGE);const{text:i}=await Pr({model:this.assistant(this.settings.modelId,{chatId:this.chatId,useRAG:!0,ragOptions:{namespace:this.app.vault.getName(),type:"note",filters:n,topK:this.settings.topK,scoreThreshold:this.settings.minSimilarityScore,includeMetadata:!0},shouldSave:!0}),maxRetries:3,messages:[s],maxTokens:this.settings.maxTokens,temperature:this.settings.temperature});if(!i)throw new Error("No response from AI Gateway");a.content=i,this.apiMessages.push(a),this.updateComponent()}catch(r){this.logger.error("Error in message processing:",{error:r instanceof Error?r.message:String(r),stack:r instanceof Error?r.stack:void 0}),new M.Notice("Error generating response. Please try again."),this.messages=this.messages.slice(0,-1),this.apiMessages=this.apiMessages.slice(0,-1)}finally{this.isProcessing=!1,this.updateComponent()}}updateComponent(){this.component&&this.component.$set({messages:[...this.messages],isProcessing:this.isProcessing})}async onClearMessages(){this.messages=[],this.apiMessages=[],this.updateComponent()}async onCopyContent(e,n){try{await navigator.clipboard.writeText(e),new M.Notice(`Copied ${n} to clipboard`)}catch(r){this.logger.error("Error copying to clipboard:",{error:r instanceof Error?r.message:String(r),stack:r instanceof Error?r.stack:void 0}),new M.Notice(`Failed to copy ${n}`)}}cleanup(){for(const e of this.svelteComponents)e&&typeof e.$destroy=="function"&&e.$destroy()}initializeComponent(e,n){const r=new n({target:e,props:{messages:this.messages,isProcessing:this.isProcessing,onSendMessage:(s,a)=>this.onSendMessage(s,a),onClearMessages:()=>this.onClearMessages(),onCopyConversation:()=>this.onCopyContent(this.messages.map(s=>`${s.role}: ${s.content}`).join(`

`),"conversation"),onCopyMessage:s=>this.onCopyContent(s,"message")}});this.component=r,this.svelteComponents.push(r)}}function X(){}const Zr=t=>t;function ip(t,e){for(const n in e)t[n]=e[n];return t}function Li(t){return t()}function bs(){return Object.create(null)}function Pe(t){t.forEach(Li)}function bt(t){return typeof t=="function"}function ze(t,e){return t!=t?e==e:t!==e||t&&typeof t=="object"||typeof t=="function"}function op(t){return Object.keys(t).length===0}function lp(t,e,n,r){if(t){const s=Zi(t,e,n,r);return t[0](s)}}function Zi(t,e,n,r){return t[1]&&r?ip(n.ctx.slice(),t[1](r(e))):n.ctx}function cp(t,e,n,r){if(t[2]&&r){const s=t[2](r(n));if(e.dirty===void 0)return s;if(typeof s=="object"){const a=[],i=Math.max(e.dirty.length,s.length);for(let o=0;o<i;o+=1)a[o]=e.dirty[o]|s[o];return a}return e.dirty|s}return e.dirty}function up(t,e,n,r,s,a){if(s){const i=Zi(e,n,r,a);t.p(i,s)}}function dp(t){if(t.ctx.length>32){const e=[],n=t.ctx.length/32;for(let r=0;r<n;r++)e[r]=-1;return e}return-1}function ws(t){const e=typeof t=="string"&&t.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);return e?[parseFloat(e[1]),e[2]||"px"]:[t,"px"]}const Fi=typeof window<"u";let Ui=Fi?()=>window.performance.now():()=>Date.now(),Fr=Fi?t=>requestAnimationFrame(t):X;const ht=new Set;function Vi(t){ht.forEach(e=>{e.c(t)||(ht.delete(e),e.f())}),ht.size!==0&&Fr(Vi)}function Bi(t){let e;return ht.size===0&&Fr(Vi),{promise:new Promise(n=>{ht.add(e={c:t,f:n})}),abort(){ht.delete(e)}}}function x(t,e){t.appendChild(e)}function zi(t){if(!t)return document;const e=t.getRootNode?t.getRootNode():t.ownerDocument;return e&&e.host?e:t.ownerDocument}function pp(t){const e=A("style");return e.textContent="/* empty */",fp(zi(t),e),e.sheet}function fp(t,e){return x(t.head||t,e),e.sheet}function G(t,e,n){t.insertBefore(e,n||null)}function z(t){t.parentNode&&t.parentNode.removeChild(t)}function Ur(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function A(t){return document.createElement(t)}function ae(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function tt(t){return document.createTextNode(t)}function K(){return tt(" ")}function Vr(){return tt("")}function xe(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function m(t,e,n){n==null?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function hp(t){return Array.from(t.childNodes)}function qi(t,e){e=""+e,t.data!==e&&(t.data=e)}function ke(t,e){t.value=e??""}function mp(t,e,{bubbles:n=!1,cancelable:r=!1}={}){return new CustomEvent(t,{detail:e,bubbles:n,cancelable:r})}class gp{constructor(e=!1){$e(this,"is_svg",!1);$e(this,"e");$e(this,"n");$e(this,"t");$e(this,"a");this.is_svg=e,this.e=this.n=null}c(e){this.h(e)}m(e,n,r=null){this.e||(this.is_svg?this.e=ae(n.nodeName):this.e=A(n.nodeType===11?"TEMPLATE":n.nodeName),this.t=n.tagName!=="TEMPLATE"?n:n.content,this.c(e)),this.i(r)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.nodeName==="TEMPLATE"?this.e.content.childNodes:this.e.childNodes)}i(e){for(let n=0;n<this.n.length;n+=1)G(this.t,this.n[n],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(z)}}const Zn=new Map;let Fn=0;function yp(t){let e=5381,n=t.length;for(;n--;)e=(e<<5)-e^t.charCodeAt(n);return e>>>0}function vp(t,e){const n={stylesheet:pp(e),rules:{}};return Zn.set(t,n),n}function Gi(t,e,n,r,s,a,i,o=0){const l=16.666/r;let c=`{
`;for(let S=0;S<=1;S+=l){const E=e+(n-e)*a(S);c+=S*100+`%{${i(E,1-E)}}
`}const u=c+`100% {${i(n,1-n)}}
}`,d=`__svelte_${yp(u)}_${o}`,p=zi(t),{stylesheet:h,rules:g}=Zn.get(p)||vp(p,t);g[d]||(g[d]=!0,h.insertRule(`@keyframes ${d} ${u}`,h.cssRules.length));const _=t.style.animation||"";return t.style.animation=`${_?`${_}, `:""}${d} ${r}ms linear ${s}ms 1 both`,Fn+=1,d}function vr(t,e){const n=(t.style.animation||"").split(", "),r=n.filter(e?a=>a.indexOf(e)<0:a=>a.indexOf("__svelte")===-1),s=n.length-r.length;s&&(t.style.animation=r.join(", "),Fn-=s,Fn||_p())}function _p(){Fr(()=>{Fn||(Zn.forEach(t=>{const{ownerNode:e}=t.stylesheet;e&&z(e)}),Zn.clear())})}let dn;function Nt(t){dn=t}function Ji(){if(!dn)throw new Error("Function called outside component initialization");return dn}function bp(t){Ji().$$.on_mount.push(t)}function wp(t){Ji().$$.after_update.push(t)}const ct=[],pn=[];let mt=[];const Ss=[],Sp=Promise.resolve();let _r=!1;function xp(){_r||(_r=!0,Sp.then(Hi))}function et(t){mt.push(t)}const ar=new Set;let it=0;function Hi(){if(it!==0)return;const t=dn;do{try{for(;it<ct.length;){const e=ct[it];it++,Nt(e),kp(e.$$)}}catch(e){throw ct.length=0,it=0,e}for(Nt(null),ct.length=0,it=0;pn.length;)pn.pop()();for(let e=0;e<mt.length;e+=1){const n=mt[e];ar.has(n)||(ar.add(n),n())}mt.length=0}while(ct.length);for(;Ss.length;)Ss.pop()();_r=!1,ar.clear(),Nt(t)}function kp(t){if(t.fragment!==null){t.update(),Pe(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(et)}}function Tp(t){const e=[],n=[];mt.forEach(r=>t.indexOf(r)===-1?e.push(r):n.push(r)),n.forEach(r=>r()),mt=e}let Tt;function Wi(){return Tt||(Tt=Promise.resolve(),Tt.then(()=>{Tt=null})),Tt}function Un(t,e,n){t.dispatchEvent(mp(`${e?"intro":"outro"}${n}`))}const xn=new Set;let De;function br(){De={r:0,c:[],p:De}}function wr(){De.r||Pe(De.c),De=De.p}function ne(t,e){t&&t.i&&(xn.delete(t),t.i(e))}function se(t,e,n,r){if(t&&t.o){if(xn.has(t))return;xn.add(t),De.c.push(()=>{xn.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}else r&&r()}const Yi={duration:0};function Ki(t,e,n){const r={direction:"in"};let s=e(t,n,r),a=!1,i,o,l=0;function c(){i&&vr(t,i)}function u(){const{delay:p=0,duration:h=300,easing:g=Zr,tick:_=X,css:S}=s||Yi;S&&(i=Gi(t,0,1,h,p,g,S,l++)),_(0,1);const E=Ui()+p,$=E+h;o&&o.abort(),a=!0,et(()=>Un(t,!0,"start")),o=Bi(L=>{if(a){if(L>=$)return _(1,0),Un(t,!0,"end"),c(),a=!1;if(L>=E){const Y=g((L-E)/h);_(Y,1-Y)}}return a})}let d=!1;return{start(){d||(d=!0,vr(t),bt(s)?(s=s(r),Wi().then(u)):u())},invalidate(){d=!1},end(){a&&(c(),a=!1)}}}function Xi(t,e,n){const r={direction:"out"};let s=e(t,n,r),a=!0,i;const o=De;o.r+=1;let l;function c(){const{delay:u=0,duration:d=300,easing:p=Zr,tick:h=X,css:g}=s||Yi;g&&(i=Gi(t,1,0,d,u,p,g));const _=Ui()+u,S=_+d;et(()=>Un(t,!1,"start")),"inert"in t&&(l=t.inert,t.inert=!0),Bi(E=>{if(a){if(E>=S)return h(0,1),Un(t,!1,"end"),--o.r||Pe(o.c),!1;if(E>=_){const $=p((E-_)/d);h(1-$,$)}}return a})}return bt(s)?Wi().then(()=>{s=s(r),c()}):c(),{end(u){u&&"inert"in t&&(t.inert=l),u&&s.tick&&s.tick(1,0),a&&(i&&vr(t,i),a=!1)}}}function Ve(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function Ep(t,e){se(t,1,1,()=>{e.delete(t.key)})}function Cp(t,e,n,r,s,a,i,o,l,c,u,d){let p=t.length,h=a.length,g=p;const _={};for(;g--;)_[t[g].key]=g;const S=[],E=new Map,$=new Map,L=[];for(g=h;g--;){const R=d(s,a,g),F=n(R);let T=i.get(F);T?r&&L.push(()=>T.p(R,e)):(T=c(F,R),T.c()),E.set(F,S[g]=T),F in _&&$.set(F,Math.abs(g-_[F]))}const Y=new Set,Q=new Set;function re(R){ne(R,1),R.m(o,u),i.set(R.key,R),u=R.first,h--}for(;p&&h;){const R=S[h-1],F=t[p-1],T=R.key,D=F.key;R===F?(u=R.first,p--,h--):E.has(D)?!i.has(T)||Y.has(T)?re(R):Q.has(D)?p--:$.get(T)>$.get(D)?(Q.add(T),re(R)):(Y.add(D),p--):(l(F,i),p--)}for(;p--;){const R=t[p];E.has(R.key)||l(R,i)}for(;h;)re(S[h-1]);return Pe(L),S}function Oe(t){t&&t.c()}function Ce(t,e,n){const{fragment:r,after_update:s}=t.$$;r&&r.m(e,n),et(()=>{const a=t.$$.on_mount.map(Li).filter(bt);t.$$.on_destroy?t.$$.on_destroy.push(...a):Pe(a),t.$$.on_mount=[]}),s.forEach(et)}function Ie(t,e){const n=t.$$;n.fragment!==null&&(Tp(n.after_update),Pe(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function Ip(t,e){t.$$.dirty[0]===-1&&(ct.push(t),xp(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function qe(t,e,n,r,s,a,i=null,o=[-1]){const l=dn;Nt(t);const c=t.$$={fragment:null,ctx:[],props:a,update:X,not_equal:s,bound:bs(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(l?l.$$.context:[])),callbacks:bs(),dirty:o,skip_bound:!1,root:e.target||l.$$.root};i&&i(c.root);let u=!1;if(c.ctx=n?n(t,e.props||{},(d,p,...h)=>{const g=h.length?h[0]:p;return c.ctx&&s(c.ctx[d],c.ctx[d]=g)&&(!c.skip_bound&&c.bound[d]&&c.bound[d](g),u&&Ip(t,d)),p}):[],c.update(),u=!0,Pe(c.before_update),c.fragment=r?r(c.ctx):!1,e.target){if(e.hydrate){const d=hp(e.target);c.fragment&&c.fragment.l(d),d.forEach(z)}else c.fragment&&c.fragment.c();e.intro&&ne(t.$$.fragment),Ce(t,e.target,e.anchor),Hi()}Nt(l)}class Ge{constructor(){$e(this,"$$");$e(this,"$$set")}$destroy(){Ie(this,1),this.$destroy=X}$on(e,n){if(!bt(n))return X;const r=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return r.push(n),()=>{const s=r.indexOf(n);s!==-1&&r.splice(s,1)}}$set(e){this.$$set&&!op(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Ap="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Ap);function Np(t){const e=t-1;return e*e*e+1}function Sr(t,{delay:e=0,duration:n=400,easing:r=Zr}={}){const s=+getComputedStyle(t).opacity;return{delay:e,duration:n,easing:r,css:a=>`opacity: ${a*s}`}}function Rp(t,{delay:e=0,duration:n=400,easing:r=Np,x:s=0,y:a=0,opacity:i=0}={}){const o=getComputedStyle(t),l=+o.opacity,c=o.transform==="none"?"":o.transform,u=l*(1-i),[d,p]=ws(s),[h,g]=ws(a);return{delay:e,duration:n,easing:r,css:(_,S)=>`
			transform: ${c} translate(${(1-_)*d}${p}, ${(1-_)*h}${g});
			opacity: ${l-u*S}`}}function xs(t,e=!1,n={p:"text-base"}){if(!t)return t;const r=l=>l.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),s=`underline text-${e?"muted":"primary"}-foreground inline font-bold p-0 transition-colors hover:underline hover:outline-none decoration-1 decoration-skip-ink-none underline-offset-[0.25em] hover:decoration-2`,a=[];t=t.replace(/```([\s\S]*?)```/g,(l,c)=>(a.push(c),`{{CODEBLOCK${a.length-1}}}`));const i=[];t=t.replace(/`([^`]+)`/g,(l,c)=>(i.push(c),`{{INLINECODE${i.length-1}}}`));let o=t.replace(/\\\\/g,"\\").replace(/\\n/g,`
`).replace(/<summary>/g,"**Summary:** ").replace(/<\/summary>/g,"").replace(/<questions>/g,"**Questions:** ").replace(/<\/questions>/g,"").replace(/<question>/g,"").replace(/<\/question>/g,"").replace(/<answer>/g,"").replace(/<\/answer>/g,"").replace(/<prompt_analysis>/g,"**Analysis:** ").replace(/<\/prompt_analysis>/g,"").replace(/<analysis>/g,"**Analysis:** ").replace(/<\/analysis>/g,"").replace(/<thought>/g,"**Thought:** ").replace(/<\/thought>/g,"").replace(/<action>/g,"**Action:** ").replace(/<\/action>/g,"").replace(/<unclear_parts>/g,"**Unsure about:** ").replace(/<\/unclear_parts>/g,"").replace(/<key_elements>/g,"**Key Elements:** ").replace(/<\/key_elements>/g,"").replace(/<key_elements_missing>/g,"**Key Elements Missing:** ").replace(/<\/key_elements_missing>/g,"").replace(/<suggestions>/g,"**Suggestions:** ").replace(/<\/suggestions>/g,"").replace(/<suggestion>/g,"").replace(/<\/suggestion>/g,"").replace(/<revised_prompt>/g,"**Revised Prompt:** ").replace(/<\/revised_prompt>/g,"").replace(/<problem_breakdown>/g,"**Problem Breakdown:** ").replace(/<\/problem_breakdown>/g,"");return o=r(o).replace(/^### (.*?)$/gm,`<h3>$1</h3>
`).replace(/^## (.*?)$/gm,`<h2>$1</h2>
`).replace(/^# (.*?)$/gm,`<h1>$1</h1>
`).replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/__(.*?)__/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/_(.*?)_/g,"<em>$1</em>").replace(/!\[(.*?)\]\((.*?)\)/g,'<img src="$2" alt="$1" class="rounded-lg max-w-full h-auto my-4" loading="lazy" />').replace(/\[([^\]]+)\]\(([^)]+)\)/g,`<a href="$2" target="_blank" rel="noopener noreferrer" class="${s}">$1</a>`).replace(/\[\[(.*?)\]\]/g,`<a href="$1" class="internal-link ${s}">$1</a>`).replace(/^(\s*[-*+]\s+.*(?:\n(?!\s*[-*+]|\s*\d+\.).*)*)+/gm,l=>`<ul class="list-disc">${l.split(`
`).map(u=>{const d=u.replace(/^\s*[-*+]\s+/,"").trim();return d?`<li>${d}</li>`:""}).filter(Boolean).join(`
`)}</ul>`).replace(/^(\s*\d+\.\s+.*(?:\n(?!\s*[-*+]|\s*\d+\.).*)*)+/gm,l=>`<ol class="list-decimal">${l.split(`
`).map(u=>{const d=u.replace(/^\s*\d+\.\s+/,"").trim();return d?`<li>${d}</li>`:""}).filter(Boolean).join(`
`)}</ol>`).replace(/^(>\s+.*(?:\n(?!>).*)*)+/gm,l=>`<blockquote>${l.replace(/^>\s+/gm,"")}</blockquote>`).replace(/^(?:---|\*\*\*|___)\s*$/gm,"<hr>").replace(/^(?!<[houl]|<bl|<hr)[^\n]+(?:\n(?!<[houl]|<bl|<hr)[^\n]+)*/gm,l=>`<p class="${n.p||"text-base"}">${l.replace(/\n/g,"<br />")}</p>`),o=o.replace(/{{CODEBLOCK(\d+)}}/g,(l,c)=>{var S;const u=a[parseInt(c)];if(!u)return"";const d=u.split(`
`),p=((S=d[0])==null?void 0:S.trim())||"",h=/^[a-zA-Z0-9]+$/.test(p),g=h?p:"",_=h?d.slice(1).join(`
`).trim():u;return`<pre><code${g?` class="language-${g}"`:""}>${r(_)}</code></pre>`}),o=o.replace(/{{INLINECODE(\d+)}}/g,(l,c)=>{const u=i[parseInt(c)];return u?`<code>${r(u)}</code>`:""}),o}function Mp(t){let e,n,r,s,a,i;return{c(){e=ae("svg"),n=ae("rect"),r=ae("path"),s=ae("path"),a=ae("path"),i=ae("path"),m(n,"width","8"),m(n,"height","4"),m(n,"x","8"),m(n,"y","2"),m(n,"rx","1"),m(n,"ry","1"),m(r,"d","M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"),m(s,"d","M16 4h2a2 2 0 0 1 2 2v4"),m(a,"d","M21 14H11"),m(i,"d","m15 10-4 4 4 4"),m(e,"xmlns","http://www.w3.org/2000/svg"),m(e,"width","24"),m(e,"height","24"),m(e,"viewBox","0 0 24 24"),m(e,"fill","none"),m(e,"stroke","currentColor"),m(e,"stroke-width","2"),m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"class","lucide lucide-clipboard-copy")},m(o,l){G(o,e,l),x(e,n),x(e,r),x(e,s),x(e,a),x(e,i)},p:X,i:X,o:X,d(o){o&&z(e)}}}class Qi extends Ge{constructor(e){super(),qe(this,e,null,Mp,ze,{})}}function ks(t,e,n){const r=t.slice();return r[9]=e[n],r[11]=n,r}function Ts(t){let e;return{c(){e=A("div"),e.innerHTML='<h3 class="svelte-bnkcb1">Welcome to the Chat ðŸ‘‹</h3> <p>Ask me anything about your notes, or just general questions.</p>',m(e,"class","welcome-message svelte-bnkcb1")},m(n,r){G(n,e,r)},d(n){n&&z(e)}}}function Es(t){let e;function n(a,i){return a[3]?Pp:Op}let r=n(t),s=r(t);return{c(){s.c(),e=Vr()},m(a,i){s.m(a,i),G(a,e,i)},p(a,i){r!==(r=n(a))&&(s.d(1),s=r(a),s&&(s.c(),s.m(e.parentNode,e)))},d(a){a&&z(e),s.d(a)}}}function Op(t){let e;return{c(){e=A("div"),e.innerHTML='<span class="svelte-bnkcb1"></span> <span class="svelte-bnkcb1"></span> <span class="svelte-bnkcb1"></span>',m(e,"class","typing-indicator svelte-bnkcb1")},m(n,r){G(n,e,r)},d(n){n&&z(e)}}}function Pp(t){let e;return{c(){e=A("span"),e.textContent="â–‹",m(e,"class","cursor svelte-bnkcb1")},m(n,r){G(n,e,r)},d(n){n&&z(e)}}}function Cs(t,e){let n,r,s,a,i=e[9].role==="assistant"?"ðŸ¤–":"ðŸ‘¤",o,l,c,u,d,p=xs(e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?e[3]:e[9].content)+"",h,g,_,S,E,$,L,Y,Q,re,R,F,T,D,q=e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]&&Es(e);E=new Qi({});function V(){return e[6](e[9])}return{key:t,first:null,c(){n=A("div"),r=A("div"),s=A("div"),a=A("span"),o=tt(i),l=K(),c=A("div"),u=A("div"),d=new gp(!1),h=K(),q&&q.c(),g=K(),_=A("div"),S=A("button"),Oe(E.$$.fragment),$=K(),L=A("span"),L.textContent="Copy message",Y=K(),m(a,"class","role-indicator svelte-bnkcb1"),m(a,"aria-hidden","true"),d.a=h,m(u,"class","message-content-inner"),m(L,"class","sr-only svelte-bnkcb1"),m(S,"class","copy-button svelte-bnkcb1"),m(S,"aria-label","Copy message"),m(_,"class","message-actions"),m(c,"class","message-content svelte-bnkcb1"),m(s,"class","message-content-wrapper svelte-bnkcb1"),m(r,"class","message svelte-bnkcb1"),m(n,"class",Q="message-wrapper "+e[9].role+" svelte-bnkcb1"),m(n,"role","article"),this.first=n},m(N,ee){G(N,n,ee),x(n,r),x(r,s),x(s,a),x(a,o),x(s,l),x(s,c),x(c,u),d.m(p,u),x(u,h),q&&q.m(u,null),x(c,g),x(c,_),x(_,S),Ce(E,S,null),x(S,$),x(S,L),x(n,Y),F=!0,T||(D=xe(S,"click",V),T=!0)},p(N,ee){e=N,(!F||ee&1)&&i!==(i=e[9].role==="assistant"?"ðŸ¤–":"ðŸ‘¤")&&qi(o,i),(!F||ee&13)&&p!==(p=xs(e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?e[3]:e[9].content)+"")&&d.p(p),e[9].role==="assistant"&&e[11]===e[0].length-1&&e[2]?q?q.p(e,ee):(q=Es(e),q.c(),q.m(u,null)):q&&(q.d(1),q=null),(!F||ee&1&&Q!==(Q="message-wrapper "+e[9].role+" svelte-bnkcb1"))&&m(n,"class",Q)},i(N){F||(ne(E.$$.fragment,N),N&&et(()=>{F&&(R&&R.end(1),re=Ki(n,Rp,{y:20,duration:300}),re.start())}),F=!0)},o(N){se(E.$$.fragment,N),re&&re.invalidate(),N&&(R=Xi(n,Sr,{duration:200})),F=!1},d(N){N&&z(n),q&&q.d(),Ie(E),N&&R&&R.end(),T=!1,D()}}}function jp(t){let e,n,r=[],s=new Map,a,i,o,l=t[0].length<=0&&Ts(),c=Ve(t[0].filter(Is));const u=d=>d[11];for(let d=0;d<c.length;d+=1){let p=ks(t,c,d),h=u(p);s.set(h,r[d]=Cs(h,p))}return{c(){l&&l.c(),e=K(),n=A("div");for(let d=0;d<r.length;d+=1)r[d].c();m(n,"class","messages svelte-bnkcb1"),m(n,"role","log"),m(n,"aria-live","polite")},m(d,p){l&&l.m(d,p),G(d,e,p),G(d,n,p);for(let h=0;h<r.length;h+=1)r[h]&&r[h].m(n,null);t[7](n),a=!0,i||(o=xe(n,"scroll",t[5]),i=!0)},p(d,[p]){d[0].length<=0?l||(l=Ts(),l.c(),l.m(e.parentNode,e)):l&&(l.d(1),l=null),p&15&&(c=Ve(d[0].filter(Is)),br(),r=Cp(r,p,u,1,d,c,s,n,Ep,Cs,null,ks),wr())},i(d){if(!a){for(let p=0;p<c.length;p+=1)ne(r[p]);a=!0}},o(d){for(let p=0;p<r.length;p+=1)se(r[p]);a=!1},d(d){d&&(z(e),z(n)),l&&l.d(d);for(let p=0;p<r.length;p+=1)r[p].d();t[7](null),i=!1,o()}}}const Is=t=>t.role!=="system";function $p(t,e,n){let{messages:r=[]}=e,{onCopyMessage:s}=e,{isProcessing:a=!1}=e,{streamingContent:i=""}=e,o,l=!1;function c(){if(!o)return;const{scrollTop:p,scrollHeight:h,clientHeight:g}=o;h-p-g<10?l=!1:l=!0}wp(()=>{o&&!l&&o.scrollTo({top:o.scrollHeight,behavior:"instant"})});const u=p=>s(p.content);function d(p){pn[p?"unshift":"push"](()=>{o=p,n(4,o)})}return t.$$set=p=>{"messages"in p&&n(0,r=p.messages),"onCopyMessage"in p&&n(1,s=p.onCopyMessage),"isProcessing"in p&&n(2,a=p.isProcessing),"streamingContent"in p&&n(3,i=p.streamingContent)},[r,s,a,i,o,c,u,d]}class eo extends Ge{constructor(e){super(),qe(this,e,$p,jp,ze,{messages:0,onCopyMessage:1,isProcessing:2,streamingContent:3})}}function Dp(t){let e,n,r;return{c(){e=ae("svg"),n=ae("path"),r=ae("path"),m(n,"d","M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"),m(r,"d","m21.854 2.147-10.94 10.939"),m(e,"xmlns","http://www.w3.org/2000/svg"),m(e,"width","24"),m(e,"height","24"),m(e,"viewBox","0 0 24 24"),m(e,"fill","none"),m(e,"stroke","currentColor"),m(e,"stroke-width","2"),m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"class","lucide lucide-send")},m(s,a){G(s,e,a),x(e,n),x(e,r)},p:X,i:X,o:X,d(s){s&&z(e)}}}class Lp extends Ge{constructor(e){super(),qe(this,e,null,Dp,ze,{})}}function Zp(t){let e,n;return{c(){e=ae("svg"),n=ae("polygon"),m(n,"points","22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"),m(e,"xmlns","http://www.w3.org/2000/svg"),m(e,"width","24"),m(e,"height","24"),m(e,"viewBox","0 0 24 24"),m(e,"fill","none"),m(e,"stroke","currentColor"),m(e,"stroke-width","2"),m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"class","lucide lucide-filter")},m(r,s){G(r,e,s),x(e,n)},p:X,i:X,o:X,d(r){r&&z(e)}}}class Fp extends Ge{constructor(e){super(),qe(this,e,null,Zp,ze,{})}}function Up(t){let e,n,r,s;return{c(){e=ae("svg"),n=ae("path"),r=ae("path"),s=ae("path"),m(n,"d","m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21"),m(r,"d","M22 21H7"),m(s,"d","m5 11 9 9"),m(e,"xmlns","http://www.w3.org/2000/svg"),m(e,"width","24"),m(e,"height","24"),m(e,"viewBox","0 0 24 24"),m(e,"fill","none"),m(e,"stroke","currentColor"),m(e,"stroke-width","2"),m(e,"stroke-linecap","round"),m(e,"stroke-linejoin","round"),m(e,"class","lucide lucide-eraser")},m(a,i){G(a,e,i),x(e,n),x(e,r),x(e,s)},p:X,i:X,o:X,d(a){a&&z(e)}}}class Vp extends Ge{constructor(e){super(),qe(this,e,null,Up,ze,{})}}function As(t,e,n){const r=t.slice();return r[22]=e[n],r}function Ns(t,e,n){const r=t.slice();return r[28]=e[n],r}function Rs(t,e,n){const r=t.slice();return r[25]=e[n],r}const Bp=t=>({}),Ms=t=>({});function Os(t){let e,n,r,s,a,i,o,l,c,u,d,p;return n=new Vp({}),o=new Qi({}),{c(){e=A("button"),Oe(n.$$.fragment),r=K(),s=A("span"),s.textContent="Clear Chat",a=K(),i=A("button"),Oe(o.$$.fragment),l=K(),c=A("span"),c.textContent="Copy Conversation",m(s,"class","sr-only"),m(e,"class","action-button svelte-17n7afo"),m(e,"aria-label","Clear Chat"),m(c,"class","sr-only"),m(i,"class","action-button svelte-17n7afo"),m(i,"aria-label","Copy Conversation")},m(h,g){G(h,e,g),Ce(n,e,null),x(e,r),x(e,s),G(h,a,g),G(h,i,g),Ce(o,i,null),x(i,l),x(i,c),u=!0,d||(p=[xe(e,"click",function(){bt(t[2])&&t[2].apply(this,arguments)}),xe(i,"click",function(){bt(t[3])&&t[3].apply(this,arguments)})],d=!0)},p(h,g){t=h},i(h){u||(ne(n.$$.fragment,h),ne(o.$$.fragment,h),u=!0)},o(h){se(n.$$.fragment,h),se(o.$$.fragment,h),u=!1},d(h){h&&(z(e),z(a),z(i)),Ie(n),Ie(o),d=!1,Pe(p)}}}function Ps(t){let e,n,r,s,a,i,o,l=Ve(t[8]),c=[];for(let u=0;u<l.length;u+=1)c[u]=Ds(As(t,l,u));return{c(){e=A("div"),n=A("form");for(let u=0;u<c.length;u+=1)c[u].c();m(e,"class","filters svelte-17n7afo")},m(u,d){G(u,e,d),x(e,n);for(let p=0;p<c.length;p+=1)c[p]&&c[p].m(n,null);a=!0,i||(o=xe(n,"change",t[12]),i=!0)},p(u,d){if(d&256){l=Ve(u[8]);let p;for(p=0;p<l.length;p+=1){const h=As(u,l,p);c[p]?c[p].p(h,d):(c[p]=Ds(h),c[p].c(),c[p].m(n,null))}for(;p<c.length;p+=1)c[p].d(1);c.length=l.length}},i(u){a||(u&&et(()=>{a&&(s&&s.end(1),r=Ki(e,Sr,{duration:200}),r.start())}),a=!0)},o(u){r&&r.invalidate(),u&&(s=Xi(e,Sr,{duration:200})),a=!1},d(u){u&&z(e),Ur(c,u),u&&s&&s.end(),i=!1,o()}}}function zp(t){let e,n,r;return{c(){e=A("select"),n=A("option"),n.textContent="Any",r=A("option"),r.textContent="Markdown",n.__value="",ke(n,n.__value),r.__value="md",ke(r,r.__value),m(e,"name",t[22].field),m(e,"class","full-width svelte-17n7afo"),m(e,"aria-label","Filter value")},m(s,a){G(s,e,a),x(e,n),x(e,r)},p:X,d(s){s&&z(e)}}}function qp(t){let e,n,r,s,a,i,o,l;function c(p,h){return p[22].field.includes("Year")?Jp:Gp}let d=c(t)(t);return{c(){e=A("div"),n=A("select"),r=A("option"),r.textContent="=",s=A("option"),s.textContent=">=",a=A("option"),a.textContent="<=",i=K(),o=A("select"),l=A("option"),l.textContent="Any",d.c(),r.__value="$eq",ke(r,r.__value),s.__value="$gte",ke(s,s.__value),a.__value="$lte",ke(a,a.__value),m(n,"name",`${t[22].field}-op`),m(n,"class","operator-select svelte-17n7afo"),m(n,"aria-label","Filter operator"),l.__value="",ke(l,l.__value),m(o,"name",t[22].field),m(o,"class","value-select svelte-17n7afo"),m(o,"aria-label","Filter value"),m(e,"class","filter-inputs svelte-17n7afo")},m(p,h){G(p,e,h),x(e,n),x(n,r),x(n,s),x(n,a),x(e,i),x(e,o),x(o,l),d.m(o,null)},p(p,h){d.p(p,h)},d(p){p&&z(e),d.d()}}}function Gp(t){let e,n=Ve(Array.from({length:12},Ls)),r=[];for(let s=0;s<n.length;s+=1)r[s]=js(Ns(t,n,s));return{c(){for(let s=0;s<r.length;s+=1)r[s].c();e=Vr()},m(s,a){for(let i=0;i<r.length;i+=1)r[i]&&r[i].m(s,a);G(s,e,a)},p(s,a){if(a&0){n=Ve(Array.from({length:12},Ls));let i;for(i=0;i<n.length;i+=1){const o=Ns(s,n,i);r[i]?r[i].p(o,a):(r[i]=js(o),r[i].c(),r[i].m(e.parentNode,e))}for(;i<r.length;i+=1)r[i].d(1);r.length=n.length}},d(s){s&&z(e),Ur(r,s)}}}function Jp(t){let e,n=Ve(Array.from({length:5},t[20])),r=[];for(let s=0;s<n.length;s+=1)r[s]=$s(Rs(t,n,s));return{c(){for(let s=0;s<r.length;s+=1)r[s].c();e=Vr()},m(s,a){for(let i=0;i<r.length;i+=1)r[i]&&r[i].m(s,a);G(s,e,a)},p(s,a){if(a&0){n=Ve(Array.from({length:5},s[20]));let i;for(i=0;i<n.length;i+=1){const o=Rs(s,n,i);r[i]?r[i].p(o,a):(r[i]=$s(o),r[i].c(),r[i].m(e.parentNode,e))}for(;i<r.length;i+=1)r[i].d(1);r.length=n.length}},d(s){s&&z(e),Ur(r,s)}}}function js(t){let e,n=t[28]+"",r;return{c(){e=A("option"),r=tt(n),e.__value=t[28],ke(e,e.__value)},m(s,a){G(s,e,a),x(e,r)},p:X,d(s){s&&z(e)}}}function $s(t){let e,n=t[25]+"",r;return{c(){e=A("option"),r=tt(n),e.__value=t[25],ke(e,e.__value)},m(s,a){G(s,e,a),x(e,r)},p:X,d(s){s&&z(e)}}}function Ds(t){let e,n,r=t[22].label+"",s,a,i;function o(u,d){return u[22].type==="number"?qp:zp}let c=o(t)(t);return{c(){e=A("div"),n=A("label"),s=tt(r),a=K(),c.c(),i=K(),m(n,"for",t[22].field),m(e,"class","filter-row svelte-17n7afo")},m(u,d){G(u,e,d),x(e,n),x(n,s),x(e,a),c.m(e,null),x(e,i)},p(u,d){c.p(u,d)},d(u){u&&z(e),c.d()}}}function Hp(t){var ee;let e,n,r,s,a,i,o,l,c,u,d=t[6]?"Hide RAG Filters":"Show RAG Filters",p,h,g,_,S,E,$,L,Y,Q,re,R,F,T;l=new Fp({});let D=((ee=t[1])==null?void 0:ee.length)>0&&Os(t);const q=t[15]["additional-actions"],V=lp(q,t,t[14],Ms);$=new Lp({});let N=t[6]&&Ps(t);return{c(){e=A("div"),n=A("div"),r=A("textarea"),s=K(),a=A("div"),i=A("div"),o=A("button"),Oe(l.$$.fragment),c=K(),u=A("span"),p=tt(d),g=K(),D&&D.c(),_=K(),V&&V.c(),S=K(),E=A("button"),Oe($.$$.fragment),L=K(),Y=A("span"),Y.textContent="Send",re=K(),N&&N.c(),m(r,"placeholder","Type your message here..."),r.disabled=t[0],m(r,"rows","1"),m(r,"aria-label","Message input"),m(r,"class","svelte-17n7afo"),m(u,"class","sr-only"),m(o,"class","action-button svelte-17n7afo"),m(o,"aria-expanded",t[6]),m(o,"aria-label",h=t[6]?"Hide RAG Filters":"Show RAG Filters"),m(i,"class","left-actions svelte-17n7afo"),m(Y,"class","sr-only"),m(E,"class","send-button svelte-17n7afo"),E.disabled=Q=t[0]||!t[4].trim(),m(E,"aria-label","Send message"),m(a,"class","actions-container svelte-17n7afo"),m(n,"class","input-container svelte-17n7afo"),m(e,"class","input-wrapper svelte-17n7afo")},m(I,W){G(I,e,W),x(e,n),x(n,r),t[16](r),ke(r,t[4]),x(n,s),x(n,a),x(a,i),x(i,o),Ce(l,o,null),x(o,c),x(o,u),x(u,p),x(i,g),D&&D.m(i,null),x(i,_),V&&V.m(i,null),x(a,S),x(a,E),Ce($,E,null),x(E,L),x(E,Y),t[19](n),x(e,re),N&&N.m(e,null),R=!0,F||(T=[xe(r,"input",t[17]),xe(r,"input",t[9]),xe(r,"keydown",t[11]),xe(o,"click",t[18]),xe(E,"click",t[10])],F=!0)},p(I,[W]){var te;(!R||W&1)&&(r.disabled=I[0]),W&16&&ke(r,I[4]),(!R||W&64)&&d!==(d=I[6]?"Hide RAG Filters":"Show RAG Filters")&&qi(p,d),(!R||W&64)&&m(o,"aria-expanded",I[6]),(!R||W&64&&h!==(h=I[6]?"Hide RAG Filters":"Show RAG Filters"))&&m(o,"aria-label",h),((te=I[1])==null?void 0:te.length)>0?D?(D.p(I,W),W&2&&ne(D,1)):(D=Os(I),D.c(),ne(D,1),D.m(i,_)):D&&(br(),se(D,1,1,()=>{D=null}),wr()),V&&V.p&&(!R||W&16384)&&up(V,q,I,I[14],R?cp(q,I[14],W,Bp):dp(I[14]),Ms),(!R||W&17&&Q!==(Q=I[0]||!I[4].trim()))&&(E.disabled=Q),I[6]?N?(N.p(I,W),W&64&&ne(N,1)):(N=Ps(I),N.c(),ne(N,1),N.m(e,null)):N&&(br(),se(N,1,1,()=>{N=null}),wr())},i(I){R||(ne(l.$$.fragment,I),ne(D),ne(V,I),ne($.$$.fragment,I),ne(N),R=!0)},o(I){se(l.$$.fragment,I),se(D),se(V,I),se($.$$.fragment,I),se(N),R=!1},d(I){I&&z(e),t[16](null),Ie(l),D&&D.d(),V&&V.d(I),Ie($),t[19](null),N&&N.d(),F=!1,Pe(T)}}}const Ls=(t,e)=>e+1;function Wp(t,e,n){let{$$slots:r={},$$scope:s}=e,{isProcessing:a=!1}=e,{messages:i=[]}=e,{onSendMessage:o}=e,{onClearMessages:l}=e,{onCopyConversation:c}=e,u="",d,p={},h=!1,g;const _=[{field:"createdYear",type:"number",label:"Created Year"},{field:"createdMonth",type:"number",label:"Created Month"},{field:"modifiedYear",type:"number",label:"Modified Year"},{field:"modifiedMonth",type:"number",label:"Modified Month"},{field:"extension",type:"string",label:"File Type"}],S=()=>{if(d){n(5,d.style.height="24px",d);const T=Math.min(Math.max(d.scrollHeight,24),200);n(5,d.style.height=`${T}px`,d),g&&n(7,g.style.height=`${T+66}px`,g)}};bp(()=>{d&&(n(5,d.style.height="24px",d),n(7,g.style.height="90px",g),S())});const E=async()=>{if(u.trim()&&!a){const T=u.trim();n(4,u=""),n(5,d.style.height="24px",d),n(7,g.style.height="90px",g);try{await o(T,p)}catch(D){console.error("Error sending message:",D),n(4,u=T)}}},$=T=>{T.key==="Enter"&&!T.shiftKey&&(T.preventDefault(),E())};function L(T){const D=T.target,q=new FormData(D.closest("form")||D);_.forEach(V=>{const N=q.get(V.field);if(!N){delete p[V.field];return}if(V.type==="number"){const ee=q.get(`${V.field}-op`)||"$eq";p[V.field]={[ee]:Number(N)}}else p[V.field]={$eq:String(N)}})}function Y(T){pn[T?"unshift":"push"](()=>{d=T,n(5,d)})}function Q(){u=this.value,n(4,u)}const re=()=>n(6,h=!h);function R(T){pn[T?"unshift":"push"](()=>{g=T,n(7,g)})}const F=(T,D)=>new Date().getFullYear()-D;return t.$$set=T=>{"isProcessing"in T&&n(0,a=T.isProcessing),"messages"in T&&n(1,i=T.messages),"onSendMessage"in T&&n(13,o=T.onSendMessage),"onClearMessages"in T&&n(2,l=T.onClearMessages),"onCopyConversation"in T&&n(3,c=T.onCopyConversation),"$$scope"in T&&n(14,s=T.$$scope)},[a,i,l,c,u,d,h,g,_,S,E,$,L,o,s,r,Y,Q,re,R,F]}class to extends Ge{constructor(e){super(),qe(this,e,Wp,Hp,ze,{isProcessing:0,messages:1,onSendMessage:13,onClearMessages:2,onCopyConversation:3})}}function Yp(t){let e,n,r,s,a;return n=new eo({props:{isProcessing:t[1],messages:t[0],streamingContent:t[2],onCopyMessage:t[6]}}),s=new to({props:{isProcessing:t[1],messages:t[0],onSendMessage:t[3],onClearMessages:t[4],onCopyConversation:t[5]}}),{c(){e=A("div"),Oe(n.$$.fragment),r=K(),Oe(s.$$.fragment),m(e,"class","chat-modal svelte-xkhj2a")},m(i,o){G(i,e,o),Ce(n,e,null),x(e,r),Ce(s,e,null),a=!0},p(i,[o]){const l={};o&2&&(l.isProcessing=i[1]),o&1&&(l.messages=i[0]),o&4&&(l.streamingContent=i[2]),o&64&&(l.onCopyMessage=i[6]),n.$set(l);const c={};o&2&&(c.isProcessing=i[1]),o&1&&(c.messages=i[0]),o&8&&(c.onSendMessage=i[3]),o&16&&(c.onClearMessages=i[4]),o&32&&(c.onCopyConversation=i[5]),s.$set(c)},i(i){a||(ne(n.$$.fragment,i),ne(s.$$.fragment,i),a=!0)},o(i){se(n.$$.fragment,i),se(s.$$.fragment,i),a=!1},d(i){i&&z(e),Ie(n),Ie(s)}}}function Kp(t,e,n){let{messages:r=[]}=e,{isProcessing:s=!1}=e,{streamingContent:a=""}=e,{onSendMessage:i}=e,{onClearMessages:o}=e,{onCopyConversation:l}=e,{onCopyMessage:c}=e;return t.$$set=u=>{"messages"in u&&n(0,r=u.messages),"isProcessing"in u&&n(1,s=u.isProcessing),"streamingContent"in u&&n(2,a=u.streamingContent),"onSendMessage"in u&&n(3,i=u.onSendMessage),"onClearMessages"in u&&n(4,o=u.onClearMessages),"onCopyConversation"in u&&n(5,l=u.onCopyConversation),"onCopyMessage"in u&&n(6,c=u.onCopyMessage)},[r,s,a,i,o,l,c]}let Xp=class extends Ge{constructor(e){super(),qe(this,e,Kp,Yp,ze,{messages:0,isProcessing:1,streamingContent:2,onSendMessage:3,onClearMessages:4,onCopyConversation:5,onCopyMessage:6})}},Qp=class extends Di{};class ef extends M.Modal{constructor(...e){super(e[0]),this.chat=new Qp(...e),this.chat.contentEl=this.contentEl}onOpen(){const{contentEl:e}=this;e.empty(),e.addClass("chat-modal"),this.chat.initializeComponent(e,Xp)}onClose(){const{contentEl:e}=this;this.chat.cleanup(),e.empty(),e.removeClass("chat-modal")}}class tf{constructor(e,n,r,s=[]){this.app=e,this.assistant=n,this.logger=r,this.ignoredFolders=s,this.batchSize=5}async sync(){const e={successful:0,failed:0,errors:[]};this.validateServices();const r=this.app.vault.getMarkdownFiles().filter(a=>!this.isFileInIgnoredFolder(a)).filter(a=>a.extension==="md"),s=[];for(const a of r){const i=this.createVectorId(a.name),o=await this.getSyncState(i);!o||o.lastModified!==a.stat.mtime?s.push(a):e.successful++}new M.Notice(`Starting sync for ${s.length} files (${r.length-s.length} already up to date)`);for(let a=0;a<s.length;a+=this.batchSize){const i=s.slice(a,a+this.batchSize);await this.processBatch(i,e,a/this.batchSize+1,Math.ceil(s.length/this.batchSize))}return new M.Notice("Sync completed"),e}createVectorId(e){return btoa(e.slice(0,32))}isFileInIgnoredFolder(e){return this.ignoredFolders.some(n=>{const r=n.toLowerCase().replace(/\\/g,"/");return e.path.toLowerCase().replace(/\\/g,"/").startsWith(`${r}/`)})}validateServices(){if(!this.assistant)throw new Error("Assistant service not initialized")}async syncFile(e,n){try{this.logger.debug(`Processing file: ${e.path}`);const r=await this.app.vault.cachedRead(e);if(!r.trim()){this.logger.warn(`Skipping empty file: ${e.path}`);return}const s=this.createVectorId(e.name),a=await this.getSyncState(s);if(a&&a.lastModified===e.stat.mtime){this.logger.debug(`File ${e.path} hasn't changed, skipping`),n.successful++;return}const i=this.getMetadata(e);if(!await this.assistant.createEmbedding(e.name,r,"note",i,{namespace:this.app.vault.getName()})){this.logger.warn(`Skipping file ${e.path} due to no embeddings`);return}await this.saveSyncState(s,e,[],i),n.successful++,this.logger.debug(`Successfully processed: ${e.path}`)}catch(r){n.failed++,n.errors.push({file:e.path,error:r instanceof Error?r.message:String(r)}),this.logger.error(`Failed to process ${e.path}:`,{error:r instanceof Error?r.message:String(r),stack:r instanceof Error?r.stack:void 0})}}getMetadata(e){const n={fileName:e.name,extension:e.extension};if(e.stat.ctime){const r=new Date(e.stat.ctime);n.created=e.stat.ctime,n.createdYear=r.getFullYear(),n.createdMonth=r.getMonth()+1}if(e.stat.mtime){const r=new Date(e.stat.mtime);n.modified=e.stat.mtime,n.modifiedYear=r.getFullYear(),n.modifiedMonth=r.getMonth()+1}return n}async ensureSyncDirectory(){const e=".cloudflare-ai/sync";await this.app.vault.adapter.exists(e)||await this.app.vault.adapter.mkdir(e)}async saveSyncState(e,n,r,s){const a={id:e,path:n.path,lastSync:Date.now(),lastModified:n.stat.mtime,metadata:s,vectors:r},i=`.cloudflare-ai/sync/${e}.json`;await this.app.vault.adapter.write(i,JSON.stringify(a,null,2))}async getSyncState(e){await this.ensureSyncDirectory();const n=`.cloudflare-ai/sync/${e}.json`;try{if(await this.app.vault.adapter.exists(n)){const r=await this.app.vault.adapter.read(n);return JSON.parse(r)}}catch(r){this.logger.warn(`Failed to read sync state for ${e}:`,{error:r instanceof Error?r.message:String(r),stack:r instanceof Error?r.stack:void 0})}return null}async processBatch(e,n,r,s){this.logger.debug(`Processing sync batch ${r}/${s}`),(await Promise.allSettled(e.map(i=>this.syncFile(i,n)))).forEach((i,o)=>{i.status==="rejected"&&this.logger.error(`Failed to sync file ${e[o].path}: ${i.reason}`)})}}var we=(t=>(t[t.DEBUG=0]="DEBUG",t[t.INFO=1]="INFO",t[t.WARN=2]="WARN",t[t.ERROR=3]="ERROR",t))(we||{});class nf{constructor(e={}){this.onConfigChange=s=>{this.logLevel=this.parseLogLevel(s.level||"debug")};const r={...sp(),...e};this.logLevel=this.parseLogLevel(r.level||"debug"),this.useTimestamp=r.useTimestamp??!0,this.output=r.output||console,this.serviceName=r.serviceName,Ln.addListener(s=>{this.logLevel=this.parseLogLevel(s.level||"debug")})}parseLogLevel(e){const n=e.toLowerCase(),r={debug:we.DEBUG,info:we.INFO,warn:we.WARN,error:we.ERROR};if(!(n in r))throw new Error(`Invalid log level: ${e}`);return r[n]}formatLogMessage(e,n,r){const a=[this.useTimestamp?new Date().toISOString():"",this.serviceName,e].filter(Boolean).join(" | "),i=r?` ${JSON.stringify(r)}`:"";return`${a}: ${n}${i}`}setLogLevel(e){this.logLevel=this.parseLogLevel(e)}getLogLevel(){return we[this.logLevel].toLowerCase()}isLevelEnabled(e){return this.parseLogLevel(e)>=this.logLevel}debug(e,n){if(this.logLevel<=we.DEBUG){const r=this.formatLogMessage("debug",e,n);this.output.debug(r)}}info(e,n){if(this.logLevel<=we.INFO){const r=this.formatLogMessage("info",e,n);this.output.info(r)}}warn(e,n){if(this.logLevel<=we.WARN){const r=this.formatLogMessage("warn",e,n);this.output.warn(r)}}error(e,n){if(this.logLevel<=we.ERROR){const r=this.formatLogMessage("error",e,n);this.output.error(r)}}destroy(){Ln.removeListener(this.onConfigChange)}}function rf(t){let e,n,r,s,a;return n=new eo({props:{isProcessing:t[1],messages:t[0],streamingContent:t[2],onCopyMessage:t[6]}}),s=new to({props:{isProcessing:t[1],messages:t[0],onSendMessage:t[3],onClearMessages:t[4],onCopyConversation:t[5]}}),{c(){e=A("div"),Oe(n.$$.fragment),r=K(),Oe(s.$$.fragment),m(e,"class","chat-view svelte-i0aku1")},m(i,o){G(i,e,o),Ce(n,e,null),x(e,r),Ce(s,e,null),a=!0},p(i,[o]){const l={};o&2&&(l.isProcessing=i[1]),o&1&&(l.messages=i[0]),o&4&&(l.streamingContent=i[2]),o&64&&(l.onCopyMessage=i[6]),n.$set(l);const c={};o&2&&(c.isProcessing=i[1]),o&1&&(c.messages=i[0]),o&8&&(c.onSendMessage=i[3]),o&16&&(c.onClearMessages=i[4]),o&32&&(c.onCopyConversation=i[5]),s.$set(c)},i(i){a||(ne(n.$$.fragment,i),ne(s.$$.fragment,i),a=!0)},o(i){se(n.$$.fragment,i),se(s.$$.fragment,i),a=!1},d(i){i&&z(e),Ie(n),Ie(s)}}}function sf(t,e,n){let{messages:r=[]}=e,{isProcessing:s=!1}=e,{streamingContent:a=""}=e,{onSendMessage:i}=e,{onClearMessages:o}=e,{onCopyConversation:l}=e,{onCopyMessage:c}=e;return t.$$set=u=>{"messages"in u&&n(0,r=u.messages),"isProcessing"in u&&n(1,s=u.isProcessing),"streamingContent"in u&&n(2,a=u.streamingContent),"onSendMessage"in u&&n(3,i=u.onSendMessage),"onClearMessages"in u&&n(4,o=u.onClearMessages),"onCopyConversation"in u&&n(5,l=u.onCopyConversation),"onCopyMessage"in u&&n(6,c=u.onCopyMessage)},[r,s,a,i,o,l,c]}let af=class extends Ge{constructor(e){super(),qe(this,e,sf,rf,ze,{messages:0,isProcessing:1,streamingContent:2,onSendMessage:3,onClearMessages:4,onCopyConversation:5,onCopyMessage:6})}};class of extends Di{}class lf extends M.ItemView{constructor(e,...n){super(e),this.chat=new of(...n),this.chat.contentEl=this.containerEl.children[1]}getViewType(){return lt}getDisplayText(){return"AI Chat"}async onOpen(){const e=this.containerEl.children[1];e.empty(),this.chat.initializeComponent(e,af)}async onClose(){const e=this.containerEl.children[1];this.chat.cleanup(),e.empty()}}class cf extends M.Modal{constructor(e,n){super(e),this.template=n,this.variables={},this.inputSettings=[],this.isGenerating=!1}onOpen(){const{contentEl:e,titleEl:n}=this;n.setText(this.template.name),this.template.description&&e.createEl("p",{text:this.template.description}),this.template.variables&&this.template.variables.forEach(r=>{const s=new M.Setting(e).setName(r).addText(a=>a.setPlaceholder(`Enter ${r}`).onChange(i=>{this.variables[r]=i}));this.inputSettings.push(s)}),this.isGenerating&&e.createEl("p",{text:"Generating..."}),this.generateButton=new M.Setting(e).addButton(r=>r.setButtonText("Generate").setCta().onClick(async()=>{var s;this.setGenerating(!0);try{await((s=this.onSubmitCallback)==null?void 0:s.call(this,this.variables)),this.close()}catch{this.setGenerating(!1)}}))}setGenerating(e){var r,s;this.isGenerating=e,this.inputSettings.forEach(a=>a.setDisabled(e)),(r=this.generateButton)==null||r.setDisabled(e);const n=(s=this.generateButton)==null?void 0:s.controlEl.querySelector("button");n&&(n.textContent=e?"Generating...":"Generate")}onClose(){const{contentEl:e}=this;e.empty()}onSubmit(e){this.onSubmitCallback=e}}class uf{constructor(e,n,r,s,a){this.app=e,this.assistant=n,this.logger=r,this.settings=s,this.templateManager=a}async generateFromTemplate(e,n){const r=await this.templateManager.applyTemplate(e,n);return this.generateText({prompt:r,maxTokens:this.settings.maxTokens,temperature:this.settings.temperature})}async generateInEditor(e,n={}){const r=e.getSelection(),s=n.position||e.getCursor(),a="ðŸ¤– Generating...";let i;try{if(n.replaceLine!==void 0){const c=e.getLine(n.replaceLine);e.replaceRange(a,{line:n.replaceLine,ch:0},{line:n.replaceLine,ch:c.length}),i={line:n.replaceLine,ch:0}}else if(n.replaceSelection&&e.somethingSelected()){const c=e.getCursor("from");e.replaceSelection(a),i=c}else e.replaceRange(a,s),i=s;new M.Notice(`Generating ${n.templateName||"text"}...`);let o;if(n.templateName){const c=this.templateManager.getTemplate(n.templateName);if(!c)throw new Error(`Template ${n.templateName} not found`);o=await this.generateFromTemplate(c,{text:n.text||r||e.getValue()}),n.prependHash&&!o.startsWith("#")&&(o=`# ${o}`),n.addNewline&&(o=`

${o}`)}else o=await this.generateText({prompt:r});const l={line:i.line,ch:i.ch+a.length};e.replaceRange(o,i,l),new M.Notice("Generated successfully")}catch(o){if(i){const l={line:i.line,ch:i.ch+a.length};e.replaceRange("",i,l)}this.logger.error("Generation failed",{error:o instanceof Error?o.message:String(o)}),new M.Notice(`Failed to generate: ${o instanceof Error?o.message:String(o)}`)}}async generateText(e){if(!e.prompt)throw new Error("Prompt is required");const{text:n}=await Pr({model:this.assistant(this.settings.modelId),maxRetries:3,messages:[{role:"user",content:e.prompt}]});return n}async generateWithModal(e,n,r={}){const s=this.templateManager.getTemplate(n);if(!s)throw new Error(`Template ${n} not found`);const a=new cf(this.app,s);a.onSubmit(async i=>{a.close(),new M.Notice("Generating...");const o=await this.generateFromTemplate(s,{...i,text:e.getValue()});if(r.replaceLine!==void 0){const l=e.getLine(r.replaceLine);e.replaceRange(o,{line:r.replaceLine,ch:0},{line:r.replaceLine,ch:l.length})}else{const l=r.position||e.getCursor();e.replaceRange(o,l)}new M.Notice("Generated successfully")}),a.open()}}class df{constructor(e,n){this.app=e,this.logger=n,this.templates=new Map;for(const[r,s]of Object.entries(tp))this.templates.set(r,{...s,default:!0})}async loadCustomTemplates(e){if(!this.app.vault.getAbstractFileByPath(e)){this.logger.debug("No custom templates folder found");return}const r=this.app.vault.getMarkdownFiles().filter(s=>s.path.startsWith(e));for(const s of r)try{const a=await this.app.vault.read(s),i=this.parseTemplate(a);this.templates.set(i.name,i),this.logger.debug(`Loaded custom template: ${i.name}`)}catch(a){this.logger.error(`Failed to load template ${s.path}`,{error:a})}}parseTemplate(e){const n=this.extractFrontmatter(e);if(!n.name)throw new Error("Template must have a name");return{name:n.name,description:n.description,prompt:e.replace(/^---[\s\S]*?---/,"").trim(),variables:n.variables,tags:n.tags}}extractFrontmatter(e){const n=e.match(/^---\n([\s\S]*?)\n---/);if(!n)return{};try{return M.parseYaml(n[1])}catch(r){return this.logger.error("Failed to parse template frontmatter",{error:r}),{}}}async applyTemplate(e,n){let r=e.prompt;for(const[s,a]of Object.entries(n))r=r.replace(`{{${s}}}`,a);return r}getTemplate(e){return this.templates.get(e)}getTemplates(){return this.templates}}function Et(t){var e,n;return(n=(e=t==null?void 0:t.providerMetadata)==null?void 0:e.openaiCompatible)!=null?n:{}}function pf(t){const e=[];for(const{role:n,content:r,...s}of t){const a=Et({...s});switch(n){case"system":{e.push({role:"system",content:r,...a});break}case"user":{if(r.length===1&&r[0].type==="text"){e.push({role:"user",content:r[0].text,...Et(r[0])});break}e.push({role:"user",content:r.map(i=>{var o;const l=Et(i);switch(i.type){case"text":return{type:"text",text:i.text,...l};case"image":return{type:"image_url",image_url:{url:i.image instanceof URL?i.image.toString():`data:${(o=i.mimeType)!=null?o:"image/jpeg"};base64,${or(i.image)}`},...l};case"file":throw new Re({functionality:"File content parts in user messages"})}}),...a});break}case"assistant":{let i="";const o=[];for(const l of r){const c=Et(l);switch(l.type){case"text":{i+=l.text;break}case"tool-call":{o.push({id:l.toolCallId,type:"function",function:{name:l.toolName,arguments:JSON.stringify(l.args)},...c});break}default:{const u=l;throw new Error(`Unsupported part: ${u}`)}}}e.push({role:"assistant",content:i,tool_calls:o.length>0?o:void 0,...a});break}case"tool":{for(const i of r){const o=Et(i);e.push({role:"tool",tool_call_id:i.toolCallId,content:JSON.stringify(i.result),...o})}break}default:{const i=n;throw new Error(`Unsupported role: ${i}`)}}}return e}function Vn({id:t,model:e,created:n}){return{id:t??void 0,modelId:e??void 0,timestamp:n!=null?new Date(n*1e3):void 0}}function Bn(t){switch(t){case"stop":return"stop";case"length":return"length";case"content_filter":return"content-filter";case"function_call":case"tool_calls":return"tool-calls";default:return"unknown"}}var ff=f.object({error:f.object({message:f.string(),type:f.string().nullish(),param:f.any().nullish(),code:f.union([f.string(),f.number()]).nullish()})}),Br={errorSchema:ff,errorToMessage:t=>t.error.message};function hf({mode:t,structuredOutputs:e}){var n;const r=(n=t.tools)!=null&&n.length?t.tools:void 0,s=[];if(r==null)return{tools:void 0,tool_choice:void 0,toolWarnings:s};const a=t.toolChoice,i=[];for(const l of r)l.type==="provider-defined"?s.push({type:"unsupported-tool",tool:l}):i.push({type:"function",function:{name:l.name,description:l.description,parameters:l.parameters}});if(a==null)return{tools:i,tool_choice:void 0,toolWarnings:s};const o=a.type;switch(o){case"auto":case"none":case"required":return{tools:i,tool_choice:o,toolWarnings:s};case"tool":return{tools:i,tool_choice:{type:"function",function:{name:a.toolName}},toolWarnings:s};default:{const l=o;throw new Re({functionality:`Unsupported tool choice type: ${l}`})}}}var mf=class{constructor(t,e,n){this.specificationVersion="v1";var r,s;this.modelId=t,this.settings=e,this.config=n;const a=(r=n.errorStructure)!=null?r:Br;this.chunkSchema=yf(a.errorSchema),this.failedResponseHandler=Tr(a),this.supportsStructuredOutputs=(s=n.supportsStructuredOutputs)!=null?s:!1}get defaultObjectGenerationMode(){return this.config.defaultObjectGenerationMode}get provider(){return this.config.provider}getArgs({mode:t,prompt:e,maxTokens:n,temperature:r,topP:s,topK:a,frequencyPenalty:i,presencePenalty:o,stopSequences:l,responseFormat:c,seed:u}){var d,p;const h=t.type,g=[];a!=null&&g.push({type:"unsupported-setting",setting:"topK"}),(c==null?void 0:c.type)==="json"&&c.schema!=null&&!this.supportsStructuredOutputs&&g.push({type:"unsupported-setting",setting:"responseFormat",details:"JSON response format schema is only supported with structuredOutputs"});const _={model:this.modelId,user:this.settings.user,max_tokens:n,temperature:r,top_p:s,frequency_penalty:i,presence_penalty:o,response_format:(c==null?void 0:c.type)==="json"?this.supportsStructuredOutputs===!0&&c.schema!=null?{type:"json_schema",json_schema:{schema:c.schema,name:(d=c.name)!=null?d:"response",description:c.description}}:{type:"json_object"}:void 0,stop:l,seed:u,messages:pf(e)};switch(h){case"regular":{const{tools:S,tool_choice:E,toolWarnings:$}=hf({mode:t,structuredOutputs:this.supportsStructuredOutputs});return{args:{..._,tools:S,tool_choice:E},warnings:[...g,...$]}}case"object-json":return{args:{..._,response_format:this.supportsStructuredOutputs===!0&&t.schema!=null?{type:"json_schema",json_schema:{schema:t.schema,name:(p=t.name)!=null?p:"response",description:t.description}}:{type:"json_object"}},warnings:g};case"object-tool":return{args:{..._,tool_choice:{type:"function",function:{name:t.tool.name}},tools:[{type:"function",function:{name:t.tool.name,description:t.tool.description,parameters:t.tool.parameters}}]},warnings:g};default:{const S=h;throw new Error(`Unsupported type: ${S}`)}}}async doGenerate(t){var e,n,r,s,a,i;const{args:o,warnings:l}=this.getArgs({...t}),c=JSON.stringify(o),{responseHeaders:u,value:d}=await Mt({url:this.config.url({path:"/chat/completions",modelId:this.modelId}),headers:Rt(this.config.headers(),t.headers),body:o,failedResponseHandler:this.failedResponseHandler,successfulResponseHandler:Er(gf),abortSignal:t.abortSignal,fetch:this.config.fetch}),{messages:p,...h}=o,g=d.choices[0];return{text:(e=g.message.content)!=null?e:void 0,toolCalls:(n=g.message.tool_calls)==null?void 0:n.map(_=>{var S;return{toolCallType:"function",toolCallId:(S=_.id)!=null?S:Kn(),toolName:_.function.name,args:_.function.arguments}}),finishReason:Bn(g.finish_reason),usage:{promptTokens:(s=(r=d.usage)==null?void 0:r.prompt_tokens)!=null?s:NaN,completionTokens:(i=(a=d.usage)==null?void 0:a.completion_tokens)!=null?i:NaN},rawCall:{rawPrompt:p,rawSettings:h},rawResponse:{headers:u},response:Vn(d),warnings:l,request:{body:c}}}async doStream(t){if(this.settings.simulateStreaming){const p=await this.doGenerate(t);return{stream:new ReadableStream({start(g){if(g.enqueue({type:"response-metadata",...p.response}),p.text&&g.enqueue({type:"text-delta",textDelta:p.text}),p.toolCalls)for(const _ of p.toolCalls)g.enqueue({type:"tool-call",..._});g.enqueue({type:"finish",finishReason:p.finishReason,usage:p.usage,logprobs:p.logprobs,providerMetadata:p.providerMetadata}),g.close()}}),rawCall:p.rawCall,rawResponse:p.rawResponse,warnings:p.warnings}}const{args:e,warnings:n}=this.getArgs({...t}),r=JSON.stringify({...e,stream:!0}),{responseHeaders:s,value:a}=await Mt({url:this.config.url({path:"/chat/completions",modelId:this.modelId}),headers:Rt(this.config.headers(),t.headers),body:{...e,stream:!0},failedResponseHandler:this.failedResponseHandler,successfulResponseHandler:Sa(this.chunkSchema),abortSignal:t.abortSignal,fetch:this.config.fetch}),{messages:i,...o}=e,l=[];let c="unknown",u={promptTokens:void 0,completionTokens:void 0},d=!0;return{stream:a.pipeThrough(new TransformStream({transform(p,h){var g,_,S,E,$,L,Y,Q,re,R,F,T,D,q;if(!p.success){c="error",h.enqueue({type:"error",error:p.error});return}const V=p.value;if("error"in V){c="error",h.enqueue({type:"error",error:V.error.message});return}d&&(d=!1,h.enqueue({type:"response-metadata",...Vn(V)})),V.usage!=null&&(u={promptTokens:(g=V.usage.prompt_tokens)!=null?g:void 0,completionTokens:(_=V.usage.completion_tokens)!=null?_:void 0});const N=V.choices[0];if((N==null?void 0:N.finish_reason)!=null&&(c=Bn(N.finish_reason)),(N==null?void 0:N.delta)==null)return;const ee=N.delta;if(ee.content!=null&&h.enqueue({type:"text-delta",textDelta:ee.content}),ee.tool_calls!=null)for(const I of ee.tool_calls){const W=I.index;if(l[W]==null){if(I.type!=="function")throw new Wn({data:I,message:"Expected 'function' type."});if(I.id==null)throw new Wn({data:I,message:"Expected 'id' to be a string."});if(((S=I.function)==null?void 0:S.name)==null)throw new Wn({data:I,message:"Expected 'function.name' to be a string."});l[W]={id:I.id,type:"function",function:{name:I.function.name,arguments:(E=I.function.arguments)!=null?E:""},hasFinished:!1};const ce=l[W];(($=ce.function)==null?void 0:$.name)!=null&&((L=ce.function)==null?void 0:L.arguments)!=null&&(ce.function.arguments.length>0&&h.enqueue({type:"tool-call-delta",toolCallType:"function",toolCallId:ce.id,toolName:ce.function.name,argsTextDelta:ce.function.arguments}),as(ce.function.arguments)&&(h.enqueue({type:"tool-call",toolCallType:"function",toolCallId:(Y=ce.id)!=null?Y:Kn(),toolName:ce.function.name,args:ce.function.arguments}),ce.hasFinished=!0));continue}const te=l[W];te.hasFinished||(((Q=I.function)==null?void 0:Q.arguments)!=null&&(te.function.arguments+=(R=(re=I.function)==null?void 0:re.arguments)!=null?R:""),h.enqueue({type:"tool-call-delta",toolCallType:"function",toolCallId:te.id,toolName:te.function.name,argsTextDelta:(F=I.function.arguments)!=null?F:""}),((T=te.function)==null?void 0:T.name)!=null&&((D=te.function)==null?void 0:D.arguments)!=null&&as(te.function.arguments)&&(h.enqueue({type:"tool-call",toolCallType:"function",toolCallId:(q=te.id)!=null?q:Kn(),toolName:te.function.name,args:te.function.arguments}),te.hasFinished=!0))}},flush(p){var h,g;p.enqueue({type:"finish",finishReason:c,usage:{promptTokens:(h=u.promptTokens)!=null?h:NaN,completionTokens:(g=u.completionTokens)!=null?g:NaN}})}})),rawCall:{rawPrompt:i,rawSettings:o},rawResponse:{headers:s},warnings:n,request:{body:r}}}},gf=f.object({id:f.string().nullish(),created:f.number().nullish(),model:f.string().nullish(),choices:f.array(f.object({message:f.object({role:f.literal("assistant").nullish(),content:f.string().nullish(),tool_calls:f.array(f.object({id:f.string().nullish(),type:f.literal("function"),function:f.object({name:f.string(),arguments:f.string()})})).nullish()}),finish_reason:f.string().nullish()})),usage:f.object({prompt_tokens:f.number().nullish(),completion_tokens:f.number().nullish()}).nullish()}),yf=t=>f.union([f.object({id:f.string().nullish(),created:f.number().nullish(),model:f.string().nullish(),choices:f.array(f.object({delta:f.object({role:f.enum(["assistant"]).nullish(),content:f.string().nullish(),tool_calls:f.array(f.object({index:f.number(),id:f.string().nullish(),type:f.literal("function").optional(),function:f.object({name:f.string().nullish(),arguments:f.string().nullish()})})).nullish()}).nullish(),finish_reason:f.string().nullish()})),usage:f.object({prompt_tokens:f.number().nullish(),completion_tokens:f.number().nullish()}).nullish()}),t]);function vf({prompt:t,inputFormat:e,user:n="user",assistant:r="assistant"}){if(e==="prompt"&&t.length===1&&t[0].role==="user"&&t[0].content.length===1&&t[0].content[0].type==="text")return{prompt:t[0].content[0].text};let s="";t[0].role==="system"&&(s+=`${t[0].content}

`,t=t.slice(1));for(const{role:a,content:i}of t)switch(a){case"system":throw new He({message:"Unexpected system message in prompt: ${content}",prompt:t});case"user":{const o=i.map(l=>{switch(l.type){case"text":return l.text;case"image":throw new Re({functionality:"images"})}}).join("");s+=`${n}:
${o}

`;break}case"assistant":{const o=i.map(l=>{switch(l.type){case"text":return l.text;case"tool-call":throw new Re({functionality:"tool-call messages"})}}).join("");s+=`${r}:
${o}

`;break}case"tool":throw new Re({functionality:"tool messages"});default:{const o=a;throw new Error(`Unsupported role: ${o}`)}}return s+=`${r}:
`,{prompt:s,stopSequences:[`
${n}:`]}}var _f=class{constructor(t,e,n){this.specificationVersion="v1",this.defaultObjectGenerationMode=void 0;var r;this.modelId=t,this.settings=e,this.config=n;const s=(r=n.errorStructure)!=null?r:Br;this.chunkSchema=wf(s.errorSchema),this.failedResponseHandler=Tr(s)}get provider(){return this.config.provider}getArgs({mode:t,inputFormat:e,prompt:n,maxTokens:r,temperature:s,topP:a,topK:i,frequencyPenalty:o,presencePenalty:l,stopSequences:c,responseFormat:u,seed:d}){var p;const h=t.type,g=[];i!=null&&g.push({type:"unsupported-setting",setting:"topK"}),u!=null&&u.type!=="text"&&g.push({type:"unsupported-setting",setting:"responseFormat",details:"JSON response format is not supported."});const{prompt:_,stopSequences:S}=vf({prompt:n,inputFormat:e}),E=[...S??[],...c??[]],$={model:this.modelId,echo:this.settings.echo,logit_bias:this.settings.logitBias,suffix:this.settings.suffix,user:this.settings.user,max_tokens:r,temperature:s,top_p:a,frequency_penalty:o,presence_penalty:l,seed:d,prompt:_,stop:E.length>0?E:void 0};switch(h){case"regular":{if((p=t.tools)!=null&&p.length)throw new Re({functionality:"tools"});if(t.toolChoice)throw new Re({functionality:"toolChoice"});return{args:$,warnings:g}}case"object-json":throw new Re({functionality:"object-json mode"});case"object-tool":throw new Re({functionality:"object-tool mode"});default:{const L=h;throw new Error(`Unsupported type: ${L}`)}}}async doGenerate(t){var e,n,r,s;const{args:a,warnings:i}=this.getArgs(t),{responseHeaders:o,value:l}=await Mt({url:this.config.url({path:"/completions",modelId:this.modelId}),headers:Rt(this.config.headers(),t.headers),body:a,failedResponseHandler:this.failedResponseHandler,successfulResponseHandler:Er(bf),abortSignal:t.abortSignal,fetch:this.config.fetch}),{prompt:c,...u}=a,d=l.choices[0];return{text:d.text,usage:{promptTokens:(n=(e=l.usage)==null?void 0:e.prompt_tokens)!=null?n:NaN,completionTokens:(s=(r=l.usage)==null?void 0:r.completion_tokens)!=null?s:NaN},finishReason:Bn(d.finish_reason),rawCall:{rawPrompt:c,rawSettings:u},rawResponse:{headers:o},response:Vn(l),warnings:i,request:{body:JSON.stringify(a)}}}async doStream(t){const{args:e,warnings:n}=this.getArgs(t),r={...e,stream:!0},{responseHeaders:s,value:a}=await Mt({url:this.config.url({path:"/completions",modelId:this.modelId}),headers:Rt(this.config.headers(),t.headers),body:r,failedResponseHandler:this.failedResponseHandler,successfulResponseHandler:Sa(this.chunkSchema),abortSignal:t.abortSignal,fetch:this.config.fetch}),{prompt:i,...o}=e;let l="unknown",c={promptTokens:Number.NaN,completionTokens:Number.NaN},u=!0;return{stream:a.pipeThrough(new TransformStream({transform(d,p){if(!d.success){l="error",p.enqueue({type:"error",error:d.error});return}const h=d.value;if("error"in h){l="error",p.enqueue({type:"error",error:h.error});return}u&&(u=!1,p.enqueue({type:"response-metadata",...Vn(h)})),h.usage!=null&&(c={promptTokens:h.usage.prompt_tokens,completionTokens:h.usage.completion_tokens});const g=h.choices[0];(g==null?void 0:g.finish_reason)!=null&&(l=Bn(g.finish_reason)),(g==null?void 0:g.text)!=null&&p.enqueue({type:"text-delta",textDelta:g.text})},flush(d){d.enqueue({type:"finish",finishReason:l,usage:c})}})),rawCall:{rawPrompt:i,rawSettings:o},rawResponse:{headers:s},warnings:n,request:{body:JSON.stringify(r)}}}},bf=f.object({id:f.string().nullish(),created:f.number().nullish(),model:f.string().nullish(),choices:f.array(f.object({text:f.string(),finish_reason:f.string()})),usage:f.object({prompt_tokens:f.number(),completion_tokens:f.number()}).nullish()}),wf=t=>f.union([f.object({id:f.string().nullish(),created:f.number().nullish(),model:f.string().nullish(),choices:f.array(f.object({text:f.string(),finish_reason:f.string().nullish(),index:f.number()})),usage:f.object({prompt_tokens:f.number(),completion_tokens:f.number()}).nullish()}),t]),Sf=class{constructor(t,e,n){this.specificationVersion="v1",this.modelId=t,this.settings=e,this.config=n}get provider(){return this.config.provider}get maxEmbeddingsPerCall(){var t;return(t=this.config.maxEmbeddingsPerCall)!=null?t:2048}get supportsParallelCalls(){var t;return(t=this.config.supportsParallelCalls)!=null?t:!0}async doEmbed({values:t,headers:e,abortSignal:n}){var r;if(t.length>this.maxEmbeddingsPerCall)throw new vo({provider:this.provider,modelId:this.modelId,maxEmbeddingsPerCall:this.maxEmbeddingsPerCall,values:t});const{responseHeaders:s,value:a}=await Mt({url:this.config.url({path:"/embeddings",modelId:this.modelId}),headers:Rt(this.config.headers(),e),body:{model:this.modelId,input:t,encoding_format:"float",dimensions:this.settings.dimensions,user:this.settings.user},failedResponseHandler:Tr((r=this.config.errorStructure)!=null?r:Br),successfulResponseHandler:Er(xf),abortSignal:n,fetch:this.config.fetch});return{embeddings:a.data.map(i=>i.embedding),usage:a.usage?{tokens:a.usage.prompt_tokens}:void 0,rawResponse:{headers:s}}}},xf=f.object({data:f.array(f.object({embedding:f.array(f.number())})),usage:f.object({prompt_tokens:f.number()}).nullish()});function no(t={}){const e=Jo(t.baseURL??"https://assistant.nicholasgriffin.workers.dev"),n=()=>({Authorization:`Bearer ${Po({apiKey:t.apiKey,environmentVariableName:"ASSISTANT_API_KEY",description:"Assistant API key"})}`,"X-User-Email":"obsidian@nicholasgriffin.dev","Content-Type":"application/json",...t.headers}),r=(u,d={})=>({provider:`assistant.${u}`,url:({path:p})=>`${e}${p}`,headers:n,fetch:(p,h)=>{const g=JSON.parse(h==null?void 0:h.body),_={...h,body:JSON.stringify({...g,chat_id:d.chatId,useRAG:d.useRAG,ragOptions:d.ragOptions,shouldSave:d.shouldSave,platform:"obsidian",mode:"remote",budgetConstraint:d.budgetConstraint})};return console.log("fetch",p,_),fetch(p,_)}}),s=(u,d={})=>new mf(u,d,{...r("chat",d),defaultObjectGenerationMode:"tool"}),a=(u,d={})=>new _f(u,d,r("completion",d)),i=(u,d={})=>new Sf(u,d,r("embedding",d)),o=async(u,d,p,h,g)=>{const _=`${e}/apps/insert-embedding`,S=n(),E=JSON.stringify({title:u,content:d,type:p,metadata:h,ragOptions:g}),$=await fetch(_,{method:"POST",headers:S,body:E});if(!$.ok)throw new Error(`Failed to create embedding: ${$.statusText}`);return $.json()},l=async u=>{const d=`${e}/apps/delete-embeddings`,p=n(),h=JSON.stringify({ids:u}),g=await fetch(d,{method:"POST",headers:p,body:h});if(!g.ok)throw new Error(`Failed to delete embedding: ${g.statusText}`);return g.json()},c=(u,d)=>s(u,d);return c.completionModel=a,c.chatModel=s,c.textEmbeddingModel=i,c.createEmbedding=o,c.deleteEmbedding=l,c}no();class kf extends M.Plugin{constructor(){super(...arguments),this.logger=new nf}getDecryptedApiKey(e){if(!e)return"";try{if(pt.isEncryptionAvailable())return pt.decryptString(Buffer.from(e,"base64"))}catch(n){this.logger.error("Failed to decrypt API key:",{error:n instanceof Error?n.message:String(n),stack:n instanceof Error?n.stack:void 0})}return e}async initializeServices(){const e=this.getDecryptedApiKey(this.settings.assistantApiKey);this.assistant=no({apiKey:e,baseURL:this.settings.assistantApiUrl}),this.syncService=new tf(this.app,this.assistant,this.logger,this.settings.ignoredFolders)}setupSyncInterval(){this.syncInterval&&window.clearInterval(this.syncInterval),this.settings.syncEnabled&&(this.syncInterval=window.setInterval(()=>this.syncNotes(),this.settings.autoSyncInterval*60*1e3),this.registerInterval(this.syncInterval))}async loadSettings(){this.settings=Object.assign({},ep,await this.loadData()),await this.initializeServices(),this.logger.debug("Settings loaded")}async saveSettings(){await this.saveData(this.settings),await this.initializeServices(),this.setupSyncInterval(),this.logger.debug("Settings saved")}async activateView(){if(this.app.workspace.getLeavesOfType(lt).length===0){const n=this.app.workspace.getRightLeaf(!1);n&&await n.setViewState({type:lt,active:!0})}this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(lt)[0])}async onload(){await this.loadSettings(),$i({level:this.settings.logLevel,serviceName:ji}),this.addSettingTab(new ap(this.app,this)),this.registerView(lt,e=>new lf(e,this.app,this.assistant,this.logger,this.settings,this.syncService)),this.setupSyncInterval(),this.registerEvent(this.app.metadataCache.on("deleted",async e=>{try{if(e instanceof M.TFile&&e.extension==="md"){const n=this.syncService.createVectorId(e.name);await this.assistant.deleteEmbedding([n]);const r=`.obsidian-assistant/sync/${n}.json`;await this.app.vault.adapter.exists(r)&&await this.app.vault.adapter.remove(r),new M.Notice(`Deleted file ${e.path} from the vector index`)}}catch(n){this.logger.error("Failed to remove deleted file from vector index:",{error:n instanceof Error?n.message:String(n),stack:n instanceof Error?n.stack:void 0}),new M.Notice(`Failed to remove deleted file ${e.path} from the vector index: ${n instanceof Error?n.message:String(n)}`)}})),this.app.workspace.onLayoutReady(async()=>{try{this.addRibbonIcon("message-circle","Open AI Chat",()=>this.activateView()),this.syncStatusBar=this.addStatusBarItem(),this.updateSyncStatus("Ready");const e=new df(this.app,this.logger);await e.loadCustomTemplates(this.settings.customTemplatesFolder),this.addCommand({id:"start-chat",name:"Start Chat",callback:()=>{new ef(this.app,this.assistant,this.logger,this.settings,this.syncService).open()}}),this.addCommand({id:"sync-notes",name:"Sync Notes",callback:()=>this.syncNotes()});const n=new uf(this.app,this.assistant,this.logger,this.settings,e);this.addCommand({id:"continue-writing",name:"Continue Writing",editorCallback:s=>{n.generateInEditor(s,{templateName:"continue",insertAtCursor:!0,addNewline:!0})}}),this.addCommand({id:"summarise-selection",name:"Summarise Selection",editorCheckCallback:(s,a)=>{const i=a.somethingSelected();if(s)return i;n.generateInEditor(a,{templateName:"summarise",replaceSelection:!0})}}),this.addCommand({id:"expand-selection",name:"Expand Selection",editorCheckCallback:(s,a)=>{const i=a.somethingSelected();if(s)return i;n.generateInEditor(a,{templateName:"expand",insertAtCursor:!0,addNewline:!0})}}),this.addCommand({id:"rewrite-selection",name:"Rewrite Selection",editorCheckCallback:(s,a)=>{const i=a.somethingSelected();if(s)return i;n.generateInEditor(a,{templateName:"rewrite",replaceSelection:!0})}}),this.addCommand({id:"simplify-selection",name:"Simplify Selection",editorCheckCallback:(s,a)=>{const i=a.somethingSelected();if(s)return i;n.generateInEditor(a,{templateName:"simplify",replaceSelection:!0})}}),this.addCommand({id:"suggest-tags",name:"Suggest Tags",editorCallback:s=>{n.generateInEditor(s,{templateName:"suggest-tags",replaceSelection:!1,addNewline:!0})}}),this.addCommand({id:"generate-title",name:"Generate Title",editorCallback:async s=>{const a=this.app.workspace.getActiveFile();if(a)try{const i=s.getValue(),o=e.getTemplate("generate-title");if(!o)throw new Error("Generate title template not found");const{text:l}=await Pr({model:this.assistant(this.settings.modelId),prompt:await e.applyTemplate(o,{text:i}),maxRetries:3,maxTokens:this.settings.maxTokens,temperature:this.settings.temperature});if(typeof l!="string")throw new Error("Generated title is not a string");const c=l.replace(/^#\s+/,"").replace(/[\/\\:*?"<>|]/g,"").replace(/\s+/g,"-").trim().toLowerCase(),u=a.path.replace(a.name,`${c}.${a.extension}`);await this.app.fileManager.renameFile(a,u),new M.Notice(`File renamed to: ${c}`)}catch(i){this.logger.error("Failed to generate title and rename file:",{error:i instanceof Error?i.message:String(i),stack:i instanceof Error?i.stack:void 0}),new M.Notice("Failed to generate title and rename file")}}}),this.addCommand({id:"generate-text-with-variables",name:"Generate Text With Variables",editorCallback:s=>{n.generateWithModal(s,"generate-text",{addNewline:!0})}}),this.addCommand({id:"brainstorm",name:"Brainstorm",editorCallback:s=>{n.generateInEditor(s,{templateName:"brainstorm",replaceSelection:!1,addNewline:!0})}});const r=Array.from(e.getTemplates()).filter(([s,a])=>!a.default);for(const[s,a]of r){const i=`template-${s}`;this.addCommand({id:i,name:a.description||`Execute template: ${a.name}`,editorCallback:o=>{var l;(l=a.variables)!=null&&l.length?n.generateWithModal(o,a.name,{addNewline:!0}):n.generateInEditor(o,{templateName:a.name,replaceSelection:!1,addNewline:!0})}})}this.logger.debug("loaded")}catch(e){this.logger.error("Failed to load commands",{error:e instanceof Error?e.message:String(e)})}})}onunload(){this.syncInterval&&window.clearInterval(this.syncInterval),this.logger&&this.logger.destroy(),this.app.workspace.detachLeavesOfType(lt),this.logger.debug("unloaded")}updateSyncStatus(e){this.syncStatusBar.setText(`AI Sync: ${e}`),this.logger.debug("Sync status updated",{status:e})}async syncNotes(){try{if(this.logger.debug("Syncing notes"),this.updateSyncStatus("In Progress..."),!this.syncService)throw new Error("Sync service not initialized");await this.syncService.sync(),this.settings.lastSyncTime=Date.now(),await this.saveSettings();const e=new Date().toLocaleTimeString();this.updateSyncStatus(`Complete (${e})`),this.logger.debug("Sync complete",{timestamp:e})}catch(e){this.logger.error("Sync failed",{error:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0}),this.updateSyncStatus("Failed"),new M.Notice(`Sync failed: ${e instanceof Error?e.message:String(e)}`)}}}module.exports=kf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
